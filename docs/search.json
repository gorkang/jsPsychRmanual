[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jsPsychR manual",
    "section": "",
    "text": "What is jsPsychR?\njsPsychR is a group of open source tools to help create experimental paradigms with jsPsych, simulate participants and standardize the data preparation and analysis. The final goal is to help you have the data preparation and analysis ready before collecting any real data, drastically reducing errors in your protocols, and making the move towards registered reports easier.\nWe have three main tools:\nContributors"
  },
  {
    "objectID": "index.html#papers-published-using-jspsychr",
    "href": "index.html#papers-published-using-jspsychr",
    "title": "jsPsychR manual",
    "section": "Papers published using jsPsychR",
    "text": "Papers published using jsPsychR\n\nNeely-Prado, A., van Elk, M., Navarrete, G., Hola, F., & Huepe, D. (2021). Social Adaptation in Context: The Differential Role of Religiosity and Self-Esteem in Vulnerable vs. Non-vulnerable Populations–A Registered Report Study. Frontiers in Psychology, 12, 5257. https://doi.org/10.3389/fpsyg.2021.519623"
  },
  {
    "objectID": "qmd/01-intro.html#open-and-reproducible-pipeline",
    "href": "qmd/01-intro.html#open-and-reproducible-pipeline",
    "title": "1  Reproducible experiments",
    "section": "1.1 Open and reproducible pipeline",
    "text": "1.1 Open and reproducible pipeline\nTo replicate an experiment from a publication is not trivial. One of the main goals of this sytem is to be able to create, share and reproduce an experiment, its data, and data preparation and analysis without any extra effort.\nFurthermore, all the components of the pipeline must be Open Source, which allows reviewers, collaborators, etc. to check and run the code. This also makes it accessible to anyone with a computer and access to the internet, eliminating cost constrains.\nWith this system you can create a paradigm, simulate data and prepare data and analysis almost automatically.\nThe system output is standardized, so names of variables and the structure of the data are predictable. Finally, the plots, tables, reports and analysis are reproducible, so you can get everything ready with simulated data, preregister or even better, go for a registered report and just relaunch the data preparation and analysis when the participant’s data arrive, with a single command.\nAnd if you want to share the final data preparation and analysis project in a Docker container to make sure the future generations will be able to run it without dependency issues, we got you covered."
  },
  {
    "objectID": "qmd/01-intro.html#automatization",
    "href": "qmd/01-intro.html#automatization",
    "title": "1  Reproducible experiments",
    "section": "1.2 Automatization",
    "text": "1.2 Automatization\nWe tried to get a few basic things right, but this is an evolving project, and some things are more complex than one would want. Please do report the issues you find:\n\njsPsychMaker issues\njsPsychMonkeys issues\njsPsychHelpeR issues\n\n\n\n\n\n\nSOURCE: https://xkcd.com/1425/"
  },
  {
    "objectID": "qmd/02-QuickGuide.html#QuickGuidejsPsychMaker",
    "href": "qmd/02-QuickGuide.html#QuickGuidejsPsychMaker",
    "title": "2  Quick Guide",
    "section": "2.1 jsPsychMaker: Create an experimental protocol",
    "text": "2.1 jsPsychMaker: Create an experimental protocol\n\nSee the jsPsychMaker chapter for more detailed instructions.\n\n\n\n\n\n\n\nOutline\n\n\n\n\nInstall jsPsychMaker\ncreate_protocol() using any of the list_available_tasks() and edit the config.js to adapt the protocol settings\nOpen index.html in your browser\n\n\n\n\n\n1) Install jsPsychMaker\nOpen RStudio and run the following line in the console. This will install the jsPsychMaker package from the Github repository.\n\nif (!require('remotes')) install.packages('remotes'); remotes::install_github(\"gorkang/jsPsychMaker\")\n\n\n\n2) Create protocol\nCreate and test a fully working protocol with jsPsychMaker::create_protocol().\nInclude the canonical_tasks you want (list the available tasks with jsPsychMaker::list_available_tasks()). You have more details in available-tasks. If you need new tasks, see New tasks.\n\n  jsPsychMaker::create_protocol(canonical_tasks = c(\"AIM\", \"EAR\", \"IRI\"),\n                                folder_output = \"~/Downloads/protocol999\", \n                                launch_browser = TRUE)\n\nYou must edit config.js to adapt the protocol to your needs. See experiment configuration for more details.\n\n\n3) Run experiment\nThe experiment is ready to run on your computer. Open index.html in Google Chrome or your favorite (and up to date) browser."
  },
  {
    "objectID": "qmd/02-QuickGuide.html#QuickGuidejsPsychMonkeys",
    "href": "qmd/02-QuickGuide.html#QuickGuidejsPsychMonkeys",
    "title": "2  Quick Guide",
    "section": "2.2 jsPsychMonkeys: Simulate participants",
    "text": "2.2 jsPsychMonkeys: Simulate participants\n\nSee the jsPsychMonkeys chapter for more detailed instructions.\n\njsPsychMonkeys uses Selenium inside a Docker container to guarantee each session is a clean session. See how to setup your computer.\n\n\n\n\n\n\n\nOutline\n\n\n\n\nDownload jsPsychMonkeys\nRun Monkeys\n\n\n\n\n\n1) Install jsPsychMonkeys\n\nif (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychMonkeys')\n\n\n\n2) Run Monkeys\nUse the uid parameter to set a number of participants, e.g. uid = \"1:10\" would launch monkeys 1 to 10.\nUse the local_folder_tasks parameter to indicate the location of the jsPsychMakeR protocol. If you are on Windows, local_folder_tasks value should be something similar to C:/Users/myusername/Downloads/protocol999.\n\njsPsychMonkeys::release_the_monkeys(uid = \"1:10\", \n                                    local_folder_tasks = \"~/Downloads/protocol999/\")\n\nIf the protocol was running from a loccal folder, the Monkey’s responses will be copied to a subfolder .data/ inside the local_folder_tasks. In the example above, ~/Downloads/protocol999/.data. If the protocol was running on the server (see the server_folder_tasks parameter), the data will be in the protocols’ .data/ folder inside the server."
  },
  {
    "objectID": "qmd/02-QuickGuide.html#QuickGuidejsPsychHelpeR",
    "href": "qmd/02-QuickGuide.html#QuickGuidejsPsychHelpeR",
    "title": "2  Quick Guide",
    "section": "2.3 jsPsychHelpeR: Prepare data",
    "text": "2.3 jsPsychHelpeR: Prepare data\n\nSee the jsPsychHelpeR chapter for more detailed instructions.\n\n\n\n\n\n\n\nOutline\n\n\n\n\nInstall jsPsychHelpeR\nCreate new project\nRun data preparation\n\n\n\n\n\n1) Install jsPsychHelpeR\n\nInstall jsPsychHelpeR from Github.\n\n\nif (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychHelpeR')\n\n\n\n2) Create new project\nCreate and setup a new RStudio project for your data. Before doing this, you need to locate the raw data for the jsPsychMaker project.\nIn this example, our raw data is in ~/Downloads/protocol999/.data/ and we want the new project to be in ~/Downloads/jsPsychHelpeR999/\n\njsPsychHelpeR::run_initial_setup(pid = '999', \n                                 data_location = '~/Downloads/protocol999/.data/', \n                                 folder = '~/Downloads/jsPsychHelpeR999/')\n\nAfter this, a new RStudio project will open.\n\n\n3) Run data preparation\nRun the data preparation in the new RStudio project with targets::tar_make()\n\n# Restore all the necessary packages using renv\nrenv::restore(prompt = FALSE)\n\n# Run data preparation\ntargets::tar_make()\n\nIf you are curious, running targets::tar_visnetwork(targets_only = TRUE) will show the whole data preparation targets tree. Open the file run.R for more details."
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#available-tasks",
    "href": "qmd/03-jsPsychMaker.html#available-tasks",
    "title": "3  jsPsychMaker",
    "section": "3.1 Available tasks",
    "text": "3.1 Available tasks\nIn 2023-03-14 we have 69 tasks implemented, and 20 in development. The full details about the available tasks can be checked in this document. You can always check the full list of tasks in the Github repo.\nTo list the available tasks in you console, you can use the list_available_tasks() function. If you don’t have the jsPsychMaker package, install it first.\n\njsPsychMaker::list_available_tasks()$tasks\n\n [1] \"AIM\"          \"Bank\"         \"BART\"         \"BNT\"          \"bRCOPE\"      \n [6] \"CAS\"          \"Consent\"      \"ConsentHTML\"  \"Cov19Q\"       \"COVIDCONTROL\"\n[11] \"CRS\"          \"CRT7\"         \"CRTMCQ4\"      \"CRTv\"         \"DASS21\"      \n[16] \"DEBRIEF\"      \"DEMOGR\"       \"EAR\"          \"EmpaTom\"      \"ERQ\"         \n[21] \"ESM\"          \"fauxPasEv\"    \"GBS\"          \"GHQ12\"        \"Goodbye\"     \n[26] \"HRPVB\"        \"HRPVBpost\"    \"IBT\"          \"IDQ\"          \"IEC\"         \n[31] \"INFCONS\"      \"IRI\"          \"IRS\"          \"MDDF\"         \"MDMQ\"        \n[36] \"MIS\"          \"OBJNUM\"       \"OTRASRELIG\"   \"PBS\"          \"PRFBM\"       \n[41] \"PRFBMpost\"    \"PSETPP\"       \"PSPPC\"        \"PSS\"          \"PVC\"         \n[46] \"PWb\"          \"REI40\"        \"Report\"       \"RSS\"          \"RTS\"         \n[51] \"SASS\"         \"SBS\"          \"SCSORF\"       \"SDG\"          \"SRA\"         \n[56] \"SRBQP\"        \"SRSav\"        \"STAI\"         \"SWBQ\"         \"WEBEXEC\"     \n\n\nIf you need help creating a NEW task, see the section help creating a new task.\n\nBelow, a table with an overview of the available tasks:"
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#experiment-configuration",
    "href": "qmd/03-jsPsychMaker.html#experiment-configuration",
    "title": "3  jsPsychMaker",
    "section": "3.2 Experiment configuration",
    "text": "3.2 Experiment configuration\nIn the config.js file you can find the main parameters to control how your experiment works.\nYou can edit the config file in one of the following two ways:\n\nGo to folder_output and edit config.js.\nUse the jsPsychMaker_config Shiny APP and copy the generated config.js file in the folder_output folder.\n\nIf you use the app, you will need to copy the generated config.js file to your protocol folder. The Shiny app can also help you create a parametrized consent form (see the Consent tab).\n\n3.2.1 Main parameters\n\npid = 999;: Number of protocol\nonline = true;: true if the protocol runs in a server, false if it runs locally\nmax_participants = 3;: If you have between participants conditions (participants are assigned to only one of a number of conditions), this is the max number of participants per condition\nrandom_id = false;: true if you want to assign a random id to participants, false if the participant needs to input an id\nmax_time = \"24:00:00\";: Maximum time to complete the protocol (HH:MM:SS; Hours:Minutes:Seconds)\naccept_discarded = true;: If a participant is discarded (i.e. exceeded the max_time), should we allow them to continue, given there are available slots?\ndebug_mode = false;: When testing the protocol:\nshows DEBUG messages\ncreates the DB tables if they don’t exist\nAvoids randomization (e.g. order of items) so the jsPsychMonkeys can have a reproducible behavior\n\n\n\n3.2.2 Order of tasks\n\nfirst_tasks = ['Consent'];//  The protocol will start with these tasks in sequential order\nlast_tasks = ['Goodbye'];//  Last block of tasks presented (in sequential order)\n\nCreate as many blocks as needed:\n\nrandomly_ordered_tasks_1 = ['TASK1', 'TASK2']; //  Block of tasks in random order\nrandomly_ordered_tasks_2 = ['TASK3']; //  Block of tasks in random order\nsecuentially_ordered_tasks_1 = ['TASK5', 'TASK4']; // Block of tasks in sequential order\n\nThe final array of tasks can be build combining the above blocks. The order of the tasks in the arrays starting with “random” will be randomized.\n\ntasks = ['first_tasks', \n         'randomly_ordered_tasks_1', \n         'secuentially_ordered_tasks_1', \n         'randomly_ordered_tasks_2', \n         'last_tasks'];\n\n\n\n3.2.3 Between-subject tasks\nThe variable all_conditions in config.js let’s you define the Independent Variables (IV) and levels for the between-subject tasks:\nIf there is no between-subject task:\n\nall_conditions = {\"protocol\": {\"type\": [\"survey\"]}};\n\nIf there are between-subject tasks:\n\nall_conditions = {\"NAMETASK\": {\"name_IV\": [\"name_level1\", \"name_level2\"]}};\n\njsPsychR will randomize participants to the different conditions keeping the unbalance between conditions to the minimum possible."
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#online-offline-protocols",
    "href": "qmd/03-jsPsychMaker.html#online-offline-protocols",
    "title": "3  jsPsychMaker",
    "section": "3.3 online-offline protocols",
    "text": "3.3 online-offline protocols\njsPsych uses standard web technologies (HTML, CSS y Javascript), so that protocols should run in any modern browser (updated, please). We recommend Google Chrome just because our test suite runs with Google Chrome, so we will catch its specific issues earlier.\n\n3.3.1 Offline\nIf you want to run a protocol locally (on your computer, on a lab computer), you need to:\n\nset online = false; in the config.js file\ndouble click index.html\n\njsPsychR will use IndexedDB to store the participants’ progress and balance between conditions. The output csv files will be Downloaded to the Download folder of the computer where the protocol runs.\n\n3.3.1.1 CORS ERRORS\nIf any of the tasks imports an html file, the Offline protocol will give a CORS error.\nThere are ways to disable web security in your browser, but it MUST only be done if your experiment computer runs offline, otherwise you will be exposed to very bad things.\nSee how to run chrome disabling web security to avoid CORS error:\n\ngoogle-chrome --disable-web-security --user-data-dir=\"~/\"\n\n\n\n\n3.3.2 Online\nTu run a protocol online, set online = true; in the config.js file. You will need a couple more things:\n\nMySQL running in your server\n\nA file .secrets_mysql.php with the content below\n\nDefine the route to .secrets_mysql.php in controllers/php/mysql.php\n\nrequire_once '../../.secrets_mysql.php';\n\nTHIS FILE MUST NOT BE PUBLICLY VISIBLE FROM THE BROWSER\n\n\nUpload the files to the server :)\n\n\n<?php\n\n/* DO NOT UPLOAD TO PUBLIC REPO */\n\n  $servername = \"127.0.0.1\";\n  $username = \"USERNAME OF THE DATABASE\";\n  $password = \"PASSWORD OF THE DATABASE\";\n  $dbname = \"NAME OF THE DB\";\n  \n?>\n\njsPsychR will use MySQL to store the participants’ progress and balance between conditions. The output csv files will be Downloaded in the .data/ folder inside the protocol folder in the server.\nBefore launching the final experiment, make sure you start with a clean slate! That can be summarized in 3 simple steps:\n\nCheck the configuration for you experiment (config.js) and make sure all is well. Some of the critical bits are:\n\n\npid = 999; // SHOULD have your project ID!\nonline = true; // true is good\nmax_participants = 100; // Max participants per contition [number]\nmax_time = \"24:00:00\"; // Max time to complete the protocol [HH:MM:SS]\ndebug_mode = false; // SHOULD be false\n\n\nCheck that the .data/ folder for your protocol is empty in the server. You will likely have remains of the piloting and Monkeys.\nClean up the MySQL data associated to your protocol.\n\n\nSET @PID = 999; // HERE YOUR PROTOCOL ID!\n\ndelete from experimental_condition where id_protocol=@PID;\ndelete from user where id_protocol=@PID;\ndelete from user_condition where id_protocol=@PID;\ndelete from user_task where id_protocol=@PID;\ndelete from task where id_protocol=@PID;\ndelete from protocol where id_protocol=@PID;\n\n\nYou will most likely need help from the server admin to perform these steps."
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#need-help-implementing-a-task",
    "href": "qmd/03-jsPsychMaker.html#need-help-implementing-a-task",
    "title": "3  jsPsychMaker",
    "section": "3.4 Need help implementing a task!",
    "text": "3.4 Need help implementing a task!\nIf you need help creating a NEW task, see the section help creating a new task."
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#developing-tasks",
    "href": "qmd/03-jsPsychMaker.html#developing-tasks",
    "title": "3  jsPsychMaker",
    "section": "3.5 Developing tasks",
    "text": "3.5 Developing tasks\nRemember to place an if (debug_mode === false) before the randomization of the item order so when running in debug_mode, the items are not randomized. This is important so the behaviour of the jsPsychMonkeys is reproducible:\n\nif (debug_mode === false) NAMETASK = jsPsych.randomization.repeat(NAMETASK,1);"
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#technical-aspects",
    "href": "qmd/03-jsPsychMaker.html#technical-aspects",
    "title": "3  jsPsychMaker",
    "section": "3.6 Technical aspects",
    "text": "3.6 Technical aspects\nWe currently use jsPsych 6.3, and plan to migrate to the last stable jsPsych at some point. There is a migration guide and a Github issue with migration questions.\n\n3.6.1 Misc\nWhen index.html is launched:\n\nChecks if there are available slots\n\nWhen an uid is assigned:\n\nquestions array is created\nbetween-participants conditions are assigned and stored in the DB (MySQL if online, IndexedDB if offline)\n\nEach question, timeline or conditional question needs to have a:\n\ndata: {trialid: 'NameTask_001', procedure: 'NameTask'}\n\nThe trialid identifies the trial, and the procedure makes possible to find that trial so participants can continue the tasks where they left, know when participants finished the tasks, etc. This is done in MySQL if online, IndexedDB if offline.\ntrialid’s need to have a standardized structure, which generally conforms with NameTask_3DigitNumber. When using conditional items the structure can be a bit more complex, but not much. We use the following rules to check for non-complying trialid’s:\n^[a-zA-Z0-9]{1,100}_[0-9]{2,3}$ -> `NameTask_2or3DigitNumber`, for example `BNT_001`  \n^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_[0-9]{1,3}$ -> `NameTask_2or3DigitNumber_1to3DigitsSuffix`, for example `BNT_002_1`  \n^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_if$ -> `NameTask_2or3DigitNumber`, for example `BNT_002_if`  \n^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_[0-9]{1,3}_if$  -> `NameTask_2or3DigitNumber`, for example `BNT_002_1_if`  \n\n\n3.6.2 jsPsychMaker main changes on a task\n\nStart of a task\n\n\nquestions = ( typeof questions != 'undefined' && questions instanceof Array ) ? questions : [];\nquestions.push( check_fullscreen('NameOfTask') );\nNameOfTask = [];\n\n\nEach item\n\n\ndata: {trialid: 'NameOfTask_01', procedure: 'NameOfTask'}\n\n\nEnd of experiment\n\n\nif (debug_mode == 'false') NameOfTask = jsPsych.randomization.repeat(NameOfTask, 1);\nNameOfTask.unshift(instruction_screen_experiment);\nquestions.push.apply(questions, NameOfTask)\n\nquestions.push({\n    type: 'call-function',\n    data: {trialid: 'NameOfTask_000', procedure: 'NameOfTask'},\n    func: function(){\n      if (online) {\n        var data = jsPsych.data.get().filter({procedure: 'NameOfTask'}).csv();\n      } else {\n        var data = jsPsych.data.get().filter({procedure: 'NameOfTask'}).json();\n      }\n      saveData(data, online, 'NameOfTask');\n    }\n});\n\n\n\n3.6.3 Conditional questions\n\nvar question001 = {\n  type: 'survey-multi-choice-vertical',\n  questions: [{prompt: '<div class=\"justified\">¿Usted se ha vacunado contra el coronavirus / covid-19?</div>', options: ['&nbsp;Si', '&nbsp;No'], required: true,  random_options: false, horizontal: false}],\n  data: {trialid: 'PVC_001', procedure: 'PVC'}\n};\nPVC.push(question001);\n\nvar question001_1 = {\n  type: 'survey-multi-choice-vertical',\n  questions: [{prompt: '<div class=\"justified\">¿Usted se va a vacunar contra el coronavirus covid-19?</div>', options: ['&nbsp;Si', '&nbsp;No', '&nbsp;No estoy seguro'], required: true,  random_options: false, horizontal: false}],\n  data: {trialid: 'PVC_001_1', procedure: 'PVC'}\n};\n\nvar if_question001_1 = {\n  timeline: [question001_1],\n  data: {trialid: 'PVC_001_1_if', procedure: 'PVC'},\n  conditional_function: function(){\n    let data = (JSON.parse((jsPsych.data.get().values().find(x => x.trialid === 'PVC_001'))['response'])['Q0']).trim();\n    if((data) ==  'No'){\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\nPVC.push(if_question001_1);"
  },
  {
    "objectID": "qmd/03-jsPsychMaker.html#common-errors",
    "href": "qmd/03-jsPsychMaker.html#common-errors",
    "title": "3  jsPsychMaker",
    "section": "3.7 Common ERRORS",
    "text": "3.7 Common ERRORS\nIf you get the following error in the console: Uncaught TypeError: Cannot read properties of undefined (reading 'procedure')\nRun this in the console:\n\nfor (var i = 0; i < questions.length; i++) {\n  console.log(i + questions[i].data[\"procedure\"])\n}\n\nIt will stop in one of the items. Go to the console, check the array questions and go to the number that failed.\nWhen you know the task and item that fails, you probably need to add:\n\n`data: {trialid: 'TASKNAME_ITEMNUMBER', procedure: 'TASKNAME'}"
  },
  {
    "objectID": "qmd/04-jsPsychMonkeys.html#how-to-simulate-participants",
    "href": "qmd/04-jsPsychMonkeys.html#how-to-simulate-participants",
    "title": "4  jsPsychMonkeys",
    "section": "4.1 How to simulate participants",
    "text": "4.1 How to simulate participants\nTo run a monkey locally:\n\njsPsychMonkeys::release_the_monkeys(uid = \"1\", \n                                    local_folder_tasks = \"~/Downloads/protocol999/\")\n\nTo run a monkey on a server:\n\njsPsychMonkeys::release_the_monkeys(uid = \"1\", \n                                    server_folder_tasks = \"999\", \n                                    credentials_folder = \"~/.vault/\")\n\ncredentials_folder must contain SERVER_PATH.R and .credentials. See below for the expected content of those files."
  },
  {
    "objectID": "qmd/04-jsPsychMonkeys.html#parameters-available",
    "href": "qmd/04-jsPsychMonkeys.html#parameters-available",
    "title": "4  jsPsychMonkeys",
    "section": "4.2 Parameters available",
    "text": "4.2 Parameters available\nThere are a few parameters for jsPsychMonkeys::release_the_monkeys() that can be useful:\n\nuid_URL = TRUE: The uid is passed in the URL (e.g. &uid=1)\nlocal_folder_tasks = rep(\"Downloads/tests/test_prototol\", 25): Passing a vector of multiple protocols will make the Monkeys to complete all of them.\nkeep_alive = TRUE Keep the docker container alive after completing the tasks\nDEBUG = TRUE Activate DEBUG mode. Lot’s of stuff will show up in the console.\nopen_VNC = TRUE Activate DEBUG mode and open a VNC container to see the Monkeys’ progress.\nscreenshot = TRUE The Monkeys will take a picture of all the pages they see. The .png files are stored in outputs/screenshots\ndebug_file = TRUE Activate DEBUG mode and store all the console output in the outputs/log\nbig_container = TRUE Sets the Shared memory size (/dev/shm) to 2 gigabytes. This is useful to avoid long/complex protocols to crash\ndisable_web_security = TRUE If you are running a local protocol that loads external files (e.g. consent form in a html file), you may need this. Only works with Google Chrome.\nconsole_logs = TRUE Store the browser’s console logs. Only works with Google Chrome\nforced_random_wait = TRUE Will wait a randomly sampled number of seconds on page 4\nforced_seed = 11 Set a random seed so the Monkeys’ behavior will be fully reproducible\nforced_refresh = 20 Refresh browser in page 20 (if TRUE is given, it will refresh in a randomly sampled page)\nsequential_parallel Choose between sequential, the default, or parallel\nnumber_of_cores Number of cores for parallel monkeys. The default is half of the available cores\n\n\n4.2.1 Parameters details\n\nlocal_folder_tasks: If the folder is not accessible to Docker (anything outside the Download folder), jsPsychMonkeys will create a copy of the protocol in Downloads/JSPSYCH/"
  },
  {
    "objectID": "qmd/04-jsPsychMonkeys.html#release-a-horde-of-monkeys",
    "href": "qmd/04-jsPsychMonkeys.html#release-a-horde-of-monkeys",
    "title": "4  jsPsychMonkeys",
    "section": "4.3 Release a horde of Monkeys!",
    "text": "4.3 Release a horde of Monkeys!\nIf you want a horde of Monkeys, you can set up sequential_parallel = \"parallel\" and choose how many monkeys will run in parallel with number_of_cores:\n\njsPsychMonkeys::release_the_monkeys(uid = \"1\", \n                                    local_folder_tasks = \"~/Downloads/protocol999/\",\n                                    sequential_parallel = \"parallel\",\n                                    number_of_cores = 4)  \n\n\n10 Monkeys completing a protocol in parallel:"
  },
  {
    "objectID": "qmd/04-jsPsychMonkeys.html#issues",
    "href": "qmd/04-jsPsychMonkeys.html#issues",
    "title": "4  jsPsychMonkeys",
    "section": "4.4 Issues",
    "text": "4.4 Issues\nIf the setup configuration steps didn’t work… You may need to do one of the things below:\n\nSwitch to Ubuntu :-)\nRun participants manually"
  },
  {
    "objectID": "qmd/04-jsPsychMonkeys.html#technical-aspects",
    "href": "qmd/04-jsPsychMonkeys.html#technical-aspects",
    "title": "4  jsPsychMonkeys",
    "section": "4.5 Technical aspects",
    "text": "4.5 Technical aspects\n\n4.5.1 Launch Monkeys on a server\nYou will need two files for the configuration in the hidden and NOT SHARED .vault/ folder:\n\n.vault/SERVER_PATH.R: contains the path where the protocols are located in your server: server_path = \"http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/\"\n.vault/.credentials: contains a list with the user and password for the server: list(user = \"\", password = \"\")\n\nWith the server_folder_tasks you will set the subfolder where the protocol is located. In the example below the Monkeys would go to, http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/999\n\n\n4.5.2 Alternatives\nSince jsPsych 7.1 there is a simulation mode available, which should be much faster than the good ol’ Monkeys. Once we migrate to jsPSych 7.x, we may retire this section."
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#how-to-prepare-data",
    "href": "qmd/05-jsPsychHelpeR.html#how-to-prepare-data",
    "title": "5  jsPsychHelpeR",
    "section": "5.1 How to prepare data",
    "text": "5.1 How to prepare data\nOur goal is that each jsPsychMaker task has a sister script on jsPsychHelpeR to help prepare the data automatically. If a task you need does not have one, you can try to create the script yourself and do a pull request in the jsPsychHelpeR repo, or see the section help creating a new task.\nIf you already ran a pilot experiment, simply:\n\nInstall jsPsychHelpeR:\n\n\nif (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychHelpeR')\n\n\njsPsychHelpeR::run_initial_setup() will:\n\n\nTry to make sure you have all the dependencies, folders, etc.\n\nCopy the data to the data/pid folder\n\nMove data with sensitive tasks to the .vault folder\n\nCreate a customized _targets.R file adapted to the data of your protocol, so data preparation can run automagically\n\n\njsPsychHelpeR::run_initial_setup(pid = '999', \n                                 data_location = '~/Downloads/JSPSYCH/999/', \n                                 folder = '~/Downloads/jsPsychHelpeR_999/')\n\nIf you have the sFTP credentials for the server, it will:\n\nDownload all the data from your protocol (you will need the FTP credentials and set download_files = TRUE)\n\nDownload and zip a copy of the full protocol without the data (you will need the FTP credentials and set download_task_script = TRUE)\n\n\nThis should work on Ubuntu, if you have the FTP credentials, and sshpass and rsync installed.\n\njsPsychHelpeR::run_initial_setup(pid = '999', \n                                 download_files = TRUE, \n                                 download_task_script = TRUE,\n                                 folder = \"~/Downloads/jsPsychHelpeR_999\")\n\n\n\n5.1.1 Targets pipeline\nTo help make the pipeline reproducible and more efficient, we use the targets package (Landau 2021). A few basic things to know:\n\nThe whole process can be reproduced running targets::tar_make()\nA nice visualization of all the pre-processing steps can be seen with targets::tar_visnetwork(targets_only = TRUE)\nThe file _targets.R contains the important parameters and calls to all the functions used when running targets::tar_make()\n\nTo see more detail about any specific step, you can:\n\nGo to the relevant function in _targets.R (cursor on a function, then F2)\nLoad the input parameters of the function with debug_function(NAME_OF FUNCTION). Alternatively, manually use targets::tar_load(NAME_OF_TARGET)\nRun the code step by step as you would normally do"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#basics",
    "href": "qmd/05-jsPsychHelpeR.html#basics",
    "title": "5  jsPsychHelpeR",
    "section": "5.2 Basics",
    "text": "5.2 Basics\njsPsychHelpeR uses as input a data created with a jsPsychMaker experimental protocol.\n\n5.2.1 Inputs\nThe input data folder will be named after the protocol_id, for example 999/ and needs to be placed in the data/ folder of the jsPsychHelpeR project data/YOUR_PROJECT_NUMBER:\n\nThe data folder can contain either multiple .csv files, or a single .zip file\n\nThere will be a single .csv file for each participant and task of the protocol. For example:\n\n999_Consent_original_2022-04-02T205622_1.csv:\n\n[project: 999]_[experimento: Consent]_[version: original]_[datetime: 2022-04-02T205622]_[participant id: 1]\n\n\n\n\n5.2.2 Outputs\nWhen the pipeline successfully runs with targets::tar_make(), a number of outputs will be created.\nAll the outputs can be found in the /outputs folder. The only exception is the sensitive data and reports, which can be found in .vault/outputs. WARNING: The ‘.vault/’ folder MUST NOT be made public.\n\n5.2.2.1 Output folders\nThe outputs will be organized in different folders:\n\nData frames for different stages of data processing can be found in outputs/data\nTemporary files for manual correction are in outputs/data/manual_correction (the final manual correction files must be place by the user in data/manual_correction). WARNING: These will be overwritten each time the pipeline runs\nPlots, tables and reports are in outputs/plots, outputs/tablesand outputs/reports respectively.\nTest outputs are in outputs/tests_outputs\nAnonymized Raw data will be moved to .vault/data_vault/\n\n\n\n5.2.2.2 Output dataframes\nThere will be a single data frame (df) for each of the tasks in outputs/data, plus a data frame (DF) for each of the steps of the data preparation, and a dictionary file listing all the available tasks. We store the files in two formats, csv and rds:\n\nDF_raw.csv: All the data/project_id/ csv files combined on a single file. We only add the columns “project”, “experimento”, “version”, “datetime”, “id” by parsing the filenames\nDF_clean.csv: Clean version of the raw file ready to process the individual tasks\ndf_ShortNameOfTask.csv: One df for each of the tasks of the protocol after being processed with the prepare_ShortNameOfTask() functions\nDF_joined.csv: all the processed tasks joined in a single DF\nDF_analysis: only the total scores and dimensions from DF_joined (columns ending in _DIRt, _STDt, _DIRd, _RELd, STDd). Can be visually explored using the shiny app in Rmd/app.R\nDF_analysis_blinded: If the DVars parameter of create_DF_analysis() is not empty, jsPsychHelpeR will create DF_analysis_blinded where the DVars will be scrambled so te data analysts can perform blinded analysis\nDICCIONARY_tasks.csv: list of all tasks in the protocol\n\n\n\n5.2.2.3 Output dataframes column names\nAll the output processed data frames columns are named in a standardized way:\n\nShortNameOfTask_ItemNumber_RAW: raw responses of participants for individual items\nShortNameOfTask_ItemNumber_DIR: processed raw responses following the task correction instructions (e.g. inverting certain items, converting strings to numbers, computing accuracy…)\nShortNameOfTask_RAW_NA: number of missing data (NA) in the RAW responses\nShortNameOfTask_DIR_NA: number of missing data (NA) in the DIR responses. If it is not equal to ShortNameOfTask_RAW_NA there is something wrong in the items correction.\nShortNameOfTask_DimensionName_DIRd: scores for a specific dimension (d) in a task, calculated following task correction instructions (e.g. summing or averaging certain items)\nShortNameOfTask_DimensionName_RELd: scores for a specific dimension (d) in a task, calculated following task correction instructions AND after filtering items with low reliability. See Reliability section for more information.\nShortNameOfTask_DimensionName_STDd: standardized score for a dimension (d)\nShortNameOfTask_DIRt: total (t) score for a task calculated following task correction instructions (e.g. summing or averaging all items)\nShortNameOfTask_STDt: standardized (t) score for a task"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#advanced",
    "href": "qmd/05-jsPsychHelpeR.html#advanced",
    "title": "5  jsPsychHelpeR",
    "section": "5.3 Advanced",
    "text": "5.3 Advanced\n\n5.3.1 Need help preparing new task\nIf you need help preparing a NEW task, see the section help with new tasks.\n\n\n5.3.2 Create your own reports\nYou can use any of the template reports in the _targets.R file, or create your own reports.\nWe will start opening one of the template reports: rstudioapi::navigateToFile(\"doc/report_analysis.Rmd\").\n\nEdit the RMarkdown file to adapt it to your needs.\nIf you already did targets::tar_make(), when running targets::tar_load(DF_analysis) the dataframe DF_analysis will load in your Environment.\n\nGo back to the _targets.R file:\n\nLook for # Analysis report and uncomment the following lines:\n\n\n# tar_render(report_analysis, \"doc/report_analysis.Rmd\",\n#            output_file = paste0(\"../outputs/reports/report_analysis.html\")),\n\nWhen you finished editing and uncomented the tar_render command, go back to the run.R file:\n\ntargets::tar_make()\n\n\n\n5.3.3 Create new tasks\nTo create the correction script for a new task, you start with:\n\ncreate_new_task(short_name_task = \"NAMETASK\")\n\nThis will:\n\ncreate a new file from a template correction script (R_tasks/prepare_TEMPLATE.R)\nadapt it to your short_name_task to make everything as standardized as possible\nopen the new prepare_NAMETASK.R file\n\nIf the parameter get_info_googledoc = TRUE:\n\nThe NEW tasks document is checked.\nIf the document has been filled properly, it will show in the console standardized strings (ready to be copy/pasted to the new prepare_NAMETASK.R file) about:\n\ndimension names\nitems corresponding to each dimension\ndimension calculation\ninverse items\nnumeric conversion of items\n\n\nYou can also use get_dimensions_googledoc() as a standalone function:\nget_dimensions_googledoc(short_name_text = \"MLQ\")\nAll the prepare_NAMEOFTASK.R scripts on the R_tasks/ folder have been created starting from the same template. The only exception are the experimental tasks and some surveys with particularities that require more complex adaptations.\nWhen you finish implementing the correction script, please do a Pull request so we can add you script to the pool. If you have not already, please help us filling up details about the task in the NEW tasks document.\n\n\n5.3.4 Adapting new tasks\nget_dimensions_googledoc will show you how to adapt the prepare_TASK() script, but you will need to know how it works to be able to edit the relevant bits. Also, sometimes get_dimensions_googledoc won’t get all the details of the task right, or there could be non-standard elements to it. Here, we will describe some of the elements of the template to help understand how it works.\nRemember you should ALWAYS start with create_new_task(short_name_task = \"NAMETASK\") so your task template works well with jsPsychHelpeR.\nThere are three chunks you will need to adapt to have a fully working preparation script.\n\n[ADAPT 1/3]: Items to ignore and reverse, dimensions\n[ADAPT 2/3]: RAW to DIR for individual items\n[ADAPT 3/3]: Scales and dimensions calculations\n\n\n5.3.4.1 Items to ignore and reverse, dimensions\n\n# [ADAPT 1/3]: Items to ignore and reverse, dimensions -----------------------\n# ****************************************************************************\n\ndescription_task = \"\" # Brief description here\n\nitems_to_ignore = c(\"000\") # Ignore these items: If nothing to ignore, keep as is\nitems_to_reverse = c(\"000\") # Reverse these items: If nothing to reverse, keep as is\n\n## NameDimension1, NameDimension2 should be the names of the dimensions\n## Inside each c() create a vector of the item numbers for the dimension\n## Add lines as needed. If there are no dimensions, keep as is\nitems_dimensions = list(\n  NameDimension1 = c(\"000\"),\n  NameDimension2 = c(\"000\")\n)\n\n# [END ADAPT 1/3]: ***********************************************************\n# ****************************************************************************\n\n\n\n5.3.4.2 RAW to DIR for individual items\n\nDF_long_DIR = \n    DF_long_RAW %>% \n    select(id, trialid, RAW) %>%\n    \n    \n    \n  # [ADAPT 2/3]: RAW to DIR for individual items -------------------------------\n  # ****************************************************************************\n  \n    # Transformations\n    mutate(\n      DIR =\n        case_when(\n          RAW == \"Nunca\" ~ 1,\n          RAW == \"Poco\" ~ 2,\n          RAW == \"Medianamente\" ~ 3,\n          RAW == \"Bastante\" ~ 4,\n          RAW == \"Mucho\" ~ 5,\n          is.na(RAW) ~ NA_real_,\n          grepl(items_to_ignore, trialid) ~ NA_real_,\n          TRUE ~ 9999\n        )\n    ) %>% \n    \n    # Invert items\n    mutate(\n      DIR = \n        case_when(\n          DIR == 9999 ~ DIR, # To keep the missing values unchanged\n          trialid %in% paste0(short_name_scale_str, \"_\", items_to_reverse) ~ (6 - DIR),\n          TRUE ~ DIR\n        )\n    )\n    \n  # [END ADAPT 2/3]: ***********************************************************\n  # ****************************************************************************\n\n\n\n5.3.4.3 Scales and dimensions calculations\n\n# [ADAPT 3/3]: Scales and dimensions calculations ----------------------------\n# ****************************************************************************\n\n# Reliability -------------------------------------------------------------\n# REL1 = auto_reliability(DF_wide_RAW, short_name_scale = short_name_scale_str, items = items_DIRd1)\n# items_RELd1 = REL1$item_selection_string\n  \n\n# [USE STANDARD NAMES FOR Scales and dimensions: names_list$name_DIRd[1], names_list$name_DIRt,...] \n# CHECK with: create_formulas(type = \"dimensions_DIR\", functions = \"sum\", names_dimensions)\nDF_wide_RAW_DIR =\n  DF_wide_RAW %>% \n  mutate(\n\n    # [CHECK] Using correct formula? rowMeans() / rowSums()\n    \n    # Score Dimensions (see standardized_names(help_names = TRUE) for instructions)\n    !!names_list$name_DIRd[1] := rowMeans(select(., paste0(short_name_scale_str, \"_\", items_dimensions[[1]], \"_DIR\")), na.rm = TRUE), \n    !!names_list$name_DIRd[2] := rowSums(select(., paste0(short_name_scale_str, \"_\", items_dimensions[[2]], \"_DIR\")), na.rm = TRUE),\n    \n    # Reliability Dimensions (see standardized_names(help_names = TRUE) for instructions)\n    # !!names_list$name_RELd[1] := rowMeans(select(., paste0(short_name_scale_str, \"_\", items_RELd1, \"_DIR\")), na.rm = TRUE), \n\n    # Score Scale\n    !!names_list$name_DIRt := rowSums(select(., matches(\"_DIR$\")), na.rm = TRUE)\n    \n  )\n  \n# [END ADAPT 3/3]: ***********************************************************\n# ****************************************************************************\n\n\n\n\n5.3.5 DEBUG tasks\nAt the begining of each of the R_tasks/prepare_NAMETASK.R scripts you will find a commented debug_function(prepare_NAMETASK) line.\nWhen running it, it will load the input parameters for the task. From there, you can work inside of the preparation scipt as you would normally do in a R script.\nIf you get the error \"Error in debug_function(prepare_NAMETASK) : could not find function 'debug_function'debug_function()does nor work\" you will need to load all the functions in the R/ folder first.\nYou can do this in one of three ways:\n\nCONTROL + P shortcut will work if the run_initial_setup() completed correctly (at least on Ubuntu systems).\nRun targets::tar_load_globals()\nOr directly, source all the scripts in the R/ folder: invisible(lapply(list.files(\"./R\", full.names = TRUE, pattern = \".R$\"), source))\n\n\n\n5.3.6 Docker containers\nThe function jsPsychHelpeR::create_docker_container() will create a fully reproducible docker container with the data preparation and analysis for a specific project.\nThe container can be easily shared or stored to allow others to run the data preparation and analysis for you project without worrying about dependencies, versions of packages, etc.\nSee more information about the setup in the admin section.\nThe gist of it is, after you have the full data preparation and analysis for you project ready, to create the container image and share it, just run:\n\n# 1) Set your project ID\n  PID = 999\n\n# 2) Create docker image\n  jsPsychHelpeR::create_docker_container(PID = PID)\n\n# 3) SHARE your docker image\n  \n  # Using Dockerhub\n    system(paste0(\"docker push gorkang/jspsychhelper:pid\", PID))\n    \n  # Using a .tar file\n    system(paste0(\"docker save gorkang/jspsychhelper:pid\", PID, \" | zip > pid\", PID, \".tar.zip\"))\n\nTo load and run the container image (if you are using Windows, see here):\n\n# 1) Set your project ID\n  PID = 999\n\n# 2) Get the docker image loaded into to your computer\n\n  # Dockerhub\n  system(paste0(\"docker pull gorkang/jspsychhelper:pid\", PID))\n  \n  # .tar file\n  utils::unzip(zipfile = paste0(\"pid\", PID, \".tar.zip\"), files = paste0(\"-\"))\n  system(paste0(\"docker load --input -\"))\n  \n# 3) Run docker container\n  system(paste0(\"docker run --rm -d --name pid\", PID, \" -v ~/Downloads/jsPsychHelpeR\", PID, \"/outputs:/home/project/jsPsychHelpeR/outputs:rw gorkang/jspsychhelper:pid\", PID))\n\nThe output will be in Downloads/jsPsychHelpeR[PID]/outputs/ after a couple of minutes. You can see the data preparation and analysis progress using docker desktop.\n\n\n5.3.7 Blinded analysis\nThe function create_DF_analysis() has the parameter DVars to select the Dependent Variables in your data that should be scrambled to be ready for a blinded analysis. We use a simple sort() in those variables, so their data will be ordered from smaller to bigger, losing the relationship with the other variables in the data, but keeping their structure.\nSee MacCoun, R., & Perlmutter, S. (2015). Blind analysis: Hide results to seek the truth. Nature, 526(7572), 187-189 (https://doi.org/10.1038/526187a), or Sarafoglou, A., Hoogeveen, S., & Wagenmakers, E. J. (2023). Comparing analysis blinding with preregistration in the many-analysts religion project. Advances in Methods and Practices in Psychological Science, 6(1), 25152459221128319. (https://doi.org/10.1177/25152459221128319)"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#helper-functions",
    "href": "qmd/05-jsPsychHelpeR.html#helper-functions",
    "title": "5  jsPsychHelpeR",
    "section": "5.4 Helper functions",
    "text": "5.4 Helper functions\n\n5.4.1 Reliability\nYou can use the auto_reliability() function to help you automatically filter items with low reliability (although doing this automatically is probably a bad idea). The function uses psych::alpha() and filters by default items with an r.drop <= 0.2. See psych::alpha() help for more details. IMPORTANT: Using psych::omega() is generally a better idea, see the alpha help page.\nAn example can be found in prepare_REI40().\nThe basic logic would be:\n\n# Define items for a specific dimension\nitems_DIRd1 = c(\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\")\n\n# Calculate reliability\nREL1 = auto_reliability(DF_wide_RAW, short_name_scale = short_name_scale_str, items = items_DIRd1, min_rdrop = 0.2)\n\n# Store item selection in a variable\nitems_RELd1 = REL1$item_selection_string\n\n# In the final Dimension calculation, use the item selection including only the items with a reliability over the defined threshold   \n## See `items_RELd1` below\n!!names_list$name_RELd[1] := rowMeans(select(., paste0(short_name_scale_str, \"_\", items_RELd1, \"_DIR\")), na.rm = TRUE), \n\n# Compare it with the calculation including the original items\n## See `items_DIRd1` below\n!!names_list$name_DIRd[1] := rowMeans(select(., paste0(short_name_scale_str, \"_\", items_DIRd1, \"_DIR\")), na.rm = TRUE),"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#technical-aspects",
    "href": "qmd/05-jsPsychHelpeR.html#technical-aspects",
    "title": "5  jsPsychHelpeR",
    "section": "5.5 Technical aspects",
    "text": "5.5 Technical aspects\n\n5.5.1 How trialid’s are processed\nSee PRFBM:\n\nIf more than one response per screen\n\nItem: PRFBM_04\nResponses: {\"daño\":\"Parcialmente en desacuerdo\",\"beneficio\":\"Parcialmente en desacuerdo\"}\nfinal trialids: PRFBM_04_beneficio and PRFBM_04_daño"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#common-errors",
    "href": "qmd/05-jsPsychHelpeR.html#common-errors",
    "title": "5  jsPsychHelpeR",
    "section": "5.6 Common ERRORS",
    "text": "5.6 Common ERRORS\n\n5.6.1 run_initial_setup():\nx Can find server credentials in '.vault/.credentials'\nx 0 tasks found for protocol 'TU NUMERO DE PROYECTO'. NOT creating _targets.R file\n\n5.6.1.1 On Linux (Ubuntu):\n\nIF you have the server credentials:\n\nOpen .credentials_TEMPLATE rstudioapi::navigateToFile(\".vault/.credentials_TEMPLATE\")\nEdit the file with your server credentials\nRename the file to .credentials\n\n\n\n\nIF you DON’T have the credentials but you have the .csv results files:\n\nCopy the csv files to the folder data/YOUR_PROJECT_NUMBER\nRun again run_initial_setup()\n\n\n\n\n\n5.6.2 On Mac or Windows:\n\nCopy the csv files to the folder data/YOUR_PROJECT_NUMBER\nRun again run_initial_setup()"
  },
  {
    "objectID": "qmd/05-jsPsychHelpeR.html#rendering-rmds",
    "href": "qmd/05-jsPsychHelpeR.html#rendering-rmds",
    "title": "5  jsPsychHelpeR",
    "section": "5.7 Rendering Rmd’s",
    "text": "5.7 Rendering Rmd’s\n\nError: ! missing files _targets/meta/meta Execution halted\n\nIt is better to run everything, including your reports, inside the pipeline (targets::tar_make()).\nIf you need to the knitr (or render) button, you will have to:\n\nLoad DF’s DF_analysis = readr::read_rds(here::here(\"_targets/objects/DF_analysis\")) instead of targets::tar_load(DF_analysis)\nInclude all the necessary library() calls\n\n\nError : Could not parse knitr report Rmd/report_analysis.Rmd to detect dependencies: Scanner error: mapping values are not allowed in this context at line 6, column 17\n\nThere is something wrong in Your YAML heather.\n\n\n\n\nLandau, William Michael. 2021. “The Targets r Package: A Dynamic Make-Like Function-Oriented Pipeline Toolkit for Reproducibility and High-Performance Computing” 6: 2959. https://doi.org/10.21105/joss.02959."
  },
  {
    "objectID": "qmd/06-jsPsychRadmins.html#docker-containers",
    "href": "qmd/06-jsPsychRadmins.html#docker-containers",
    "title": "6  jsPsychR Admins",
    "section": "6.1 Docker containers",
    "text": "6.1 Docker containers\nWe can create a fully reproducible docker image with the data preparation and analysis for a specific project using jsPsychHelpeR::create_docker_container()\nAfterwards, you can use the image to run a docker container that will reproduce the analysis and results of your project.\nThe current version is a first attempt at this, so there is a lot to improve.\n\n6.1.1 Install Docker\nFirst, we need to install docker.\n\nLinux: follow installation instructions\nMac: follow installation instructions\nWindows:\n\nInstall docker desktop\nUpdate wsl (in a command prompt): wsl – update\n\n\n\n\n6.1.2 Create image for a project\nWhen a project is ready to share, you can create a self-contained docker image:\n\n# Clean environment -------------------------------------------------------\n\n  # DELETE ALL CACHE\n  system(\"docker builder prune --all -f\")\n  \n  # Clean renv cache libraries\n  renv::clean()\n\n  # Clean extra versions of libraries\n  source(\"R/helper_functions_extra.R\")\n  clean_renv_cache()\n\n\n# Create docker image -----------------------------------------------------  \n  \n  PID = 999\n  jsPsychHelpeR::create_docker_container(PID = PID)\n\n\n\n6.1.3 Store image\nYou can create a tar file with the image or directly share it through dockerhub:\n\nStore image creating a pid[PID].tar.zip file TO SHARE\n\n\n  PID = 999\n  system(paste0(\"docker save gorkang/jspsychhelper:pid\", PID, \" | zip > pid\", PID, \".tar.zip\"))\n\n\nPush image to Dockerhub\n\n\n  PID = 999\n  system(paste0(\"docker push gorkang/jspsychhelper:pid\", PID))\n\n\n\n6.1.4 Load image\nYou can load the image in your computer in two ways:\n\nUsing a pid[PID].tar.zip:\n\nOn linux:\n\n  PID = 999\n  utils::unzip(zipfile = paste0(\"pid\", PID, \".tar.zip\"), files = paste0(\"-\"))\n  system(paste0(\"docker load --input -\"))\n\nOn windows:\n\n\ntar -xf pid999.tar.zip & docker load input - \n\n\n\nPull image from Dockerhub\n\n\n  PID = 999\n  system(paste0(\"docker pull gorkang/jspsychhelper:pid\", PID))\n\n\n\n6.1.5 Run container\nOnce the docker image is loaded in your system, you will be able to run the data preparation and analysis for your project inside a docker container, ensuring reproducibility. The output will be in Downloads/jsPsychHelpeR[PID]/outputs after a couple of minutes.\n\nLinux\n\n\n  # Make sure ~/Downloads/jsPsychHelpeR999 is empty\n  file.remove(list.files(paste0(\"~/Downloads/jsPsychHelpeR\", PID, \"/outputs\"), recursive = TRUE, full.names = TRUE))\n  \n  # Run docker\n  system(paste0(\"docker run --rm -d --name pid\", PID, \" -v ~/Downloads/jsPsychHelpeR\", PID, \"/outputs:/home/project/jsPsychHelpeR/outputs:rw gorkang/jspsychhelper:pid\", PID))\n\n\nWindows\n\n\n\ndocker run --rm -d --name jspsychhelper -v %USERPROFILE%\\Downloads\\jsPsychHelpeR\\outputs:/home/project/jsPsychHelpeR/outputs:rw gorkang/jspsychhelper:pid999\n\n\n\n\n6.1.6 DEBUG Container\nYou can DEBUG a container with the following command:\n\n\ndocker run --rm -ti -v ~/Downloads/jsPsychHelpeR999/outputs:/home/project/jsPsychHelpeR/outputs:rw gorkang/jspsychhelper:pid999 /bin/bash\n\n\nInside the container, you can acces R and debug as you would locally.\n\n# See last CMD line in Dockerfile_TEMPLATE:\n# $ R\nsource('renv/activate.R')\ninvisible(lapply(list.files('./R', full.names = TRUE, pattern = '.R$'), source))\nsetup_folders(pid = 999, folder = '.')\ntargets::tar_destroy(ask = FALSE)\ntargets::tar_make()\n\n# Check size folders\ndu -had1 renv/ | sort -h\ndu -had1 * | sort -h"
  },
  {
    "objectID": "qmd/06-jsPsychRadmins.html#google-docs",
    "href": "qmd/06-jsPsychRadmins.html#google-docs",
    "title": "6  jsPsychR Admins",
    "section": "6.2 Google Docs",
    "text": "6.2 Google Docs\nWe have a few Google Documents with information about available tasks, protocols, etc.\n\nAll tasks\nList of protocols\nNEW tasks\nChecks specific tasks"
  },
  {
    "objectID": "qmd/06-jsPsychRadmins.html#folders-and-how-to-work",
    "href": "qmd/06-jsPsychRadmins.html#folders-and-how-to-work",
    "title": "6  jsPsychR Admins",
    "section": "6.3 Folders and how to work",
    "text": "6.3 Folders and how to work\nWe have two main locations, the Github jsPsychMaker project and the server.\nGithub jsPsychMaker project\n\ncanonical_protocol:\n\nmachinery: last stable version\ntasks: all available tasks\nserver: protocols/999/\n\ncanonical_protocol_DEV\n\nmachinery: development version\ntasks: all available tasks\nserver: protocols/test/canonical_protocol_DEV/\n\ncanonical_protocol_clean\n\nmachinery: last stable version\ntasks: Consent and Goodbye\nserver: protocols/test/canonical_protocol_clean/\n\nprotocols_DEV\n\nmachinery: last stable version\nshould only contain tasks in development\nserver: protocols/test/protocols_DEV/\n\n\nIn protocols_DEV we prepare the new protocolos:\n\nCreate a copy in test/protocols_DEV of canonical_protocol_clean and rename to the number of the new protocol, test/protocols_DEV/NumberOfProtocol\nOnce the protocol is ready:\n\nCopy protocol to root folder: protocols/NumberOfProtocol\nZIP subfolder and move zip to protocols/test/protocols_DEV/OLD_TESTS/\nDelete folder test/protocols_DEV/NumberOfProtocol\n\nIf there are new tasks:\n\nCHECK with: check_missing_prepare_TASK()\nTEST with create_protocol_with_NEW_tasks.R\nCopy tasks, images, videos, specific plugins, etc. to protocols/999/\nTEST in canonical protocol protocols/999/ just in case there is a weird interaction"
  },
  {
    "objectID": "qmd/06-jsPsychRadmins.html#helper-functions",
    "href": "qmd/06-jsPsychRadmins.html#helper-functions",
    "title": "6  jsPsychR Admins",
    "section": "6.4 Helper functions",
    "text": "6.4 Helper functions\nThere are a number of helper functions to make some of the jsPsychR admins tasks easier.\n\n6.4.1 Check all protocols\nFor example, we can use check_missing_prepare_TASK() to:\n\nDownload all the protocols (without data) to a local folder (sync_protocols = TRUE)\nCheck the trialid’s of all the tests are OK (check_trialids = TRUE)\nCheck there are no duplicate short_name of tasks in the tareas jsPsychR and NUEVAS tareas\nCheck which tasks do not have a prepare_TASK.R script\nCheck tasks with no info on the tareas jsPsychR Google doc\nCheck tasks with missing info on NUEVAS tareas\n\n\n# Open jsPsychHelpeR RStudio project\n\n  # Load check_missing_prepare_TASK() function\n  # cli::cli_alert_info(getwd())\n\n  WD = getwd()\n  setwd(\"../../jsPsychHelpeR/\")\n  source(\"R/check_missing_prepare_TASK.R\")\n  # source(\"../../jsPsychHelpeR/R/check_missing_prepare_TASK.R\")\n  setwd(WD)\n  \n  # If sync_protocols = TRUE, will download to ../CSCN-server/protocols all the protocols from the server\n  DF_missing = check_missing_prepare_TASK(sync_protocols = FALSE,\n                                          check_trialids = TRUE,\n                                          delete_nonexistent = TRUE,\n                                          check_new_task_tabs = TRUE,\n                                          helper_folder = \"../../jsPsychHelpeR\",\n                                          CSCN_server_folder = \"../../CSCN-server/\")\n\n  # - Tasks with no prepare_TASK() script!\n  # - Tasks NOT in Google Doc\n  # - Check trialid's are OK\n  DF_missing\n\n  DF_missing$DF_FINAL %>% tidyr::replace_na(list(missing_script = \"\",\n                                                 missing_googledoc = \"\",\n                                                 missing_task = \"\"))\n\n\n  # Tasks ready to create prepare_*.R script\n  DF_missing$DF_FINAL %>% filter(!is.na(missing_script) & is.na(missing_gdoc))\n  DF_missing$DF_FINAL %>% filter(!is.na(missing_script) | !is.na(missing_gdoc)) %>%\n    filter(!task %in% c(\"DEMOGR24\", \"DEMOGRfondecyt2022E1\", \"ITC\", \"fauxPasEv\")) %>%  # \"MDDF_respaldo\", \"mic_test\", \"faux_pas\",\n    select(-matches(\"missing\"), -Nombre, -Descripcion)\n\n\n\n6.4.2 Create protocol with NEW tasks\nWith create_protocol_with_NEW_tasks.R we can create a protocol with the tasks for which we do not yet have a control snapshot (no .csv’s in the 999.zip data).\nThis is a necessary step before the task can be moved to the canonical protocol.\nThe function find_missing_tasks_in_999() will read all the csv in jsPsychHelpeR/data/999/999.zip and depending on the value of the parameter search_where (“prepare_TASK” or “js”):\n\nall .js tasks in jsPsychMaker/protocols_DEV/\nall prepare_TASK.R in jsPSychHelpeR/R_tasks/\n\nComparing both sources, will look for tasks for which we do not have a .csv in the 999 protocol yet (remember the 999 protocol is the canonical_protocol in the server).\nThen, it prepares a NEW_TASKS protocol using the tasks.js files found in the server (after downloading all the server protocols to jsPsychR/CSCN-server/). A couple important points:\n\nThis is a bit tricky, as it will use all the tasks in the server that it can found, across all the protocols, and will select the newest one.\nSometimes there are multiple copies, with different dates and sizes…\nIt is important that the server is as clean as possible. With all the OLD non-updated protocols zipped.\n\nTo make sure the Github jsPsychMaker/protocols_DEV/NEW_TASKS/ is up to date, create_protocol_with_NEW_tasks.R will UPLOAD CSCN-server/.../NEW_TASKS to the server, and then DOWNLOAD NEW_TASKS to ../jsPsychMaker/protocols_DEV/NEW_TASKS/\n\n\n6.4.3 Check canonical protocol DEV\nWith 000_CHECK_CANONICAL.R we can check that the canonical protocol in development works and expected.\nIn the script you can:\n\nsync canonical_protocol_DEV/ folder in jsPsychMaker to 999/ in the server\nlaunch 5 monkeys\nrename the csv files to a fixed date, etc.\nprepare data\ncompare with snaphot (WIP)"
  },
  {
    "objectID": "qmd/07-NEWtasks.html#Newprotocols",
    "href": "qmd/07-NEWtasks.html#Newprotocols",
    "title": "7  New protocols and tasks",
    "section": "7.1 New protocols",
    "text": "7.1 New protocols\nYou can create a new protocol in seconds, choosing from the tasks we already have available.\nMake sure you have the last version of jsPsychMaker, installing from Github:\n\nif (!require('remotes')) install.packages('remotes'); library('remotes')\nremotes::install_github(\"gorkang/jsPsychMaker\")\n\nCheck if there are new tasks available in a new version of the Github package:\njsPsychMaker::check_NEW_tasks_Github()\n\n7.1.1 List available tasks\nYou can list available tasks to choose from. You have more details in the section available-tasks.\n\n  jsPsychMaker::list_available_tasks()\n\n$tasks\n [1] \"AIM\"          \"Bank\"         \"BART\"         \"BNT\"          \"bRCOPE\"      \n [6] \"CAS\"          \"Consent\"      \"ConsentHTML\"  \"Cov19Q\"       \"COVIDCONTROL\"\n[11] \"CRS\"          \"CRT7\"         \"CRTMCQ4\"      \"CRTv\"         \"DASS21\"      \n[16] \"DEBRIEF\"      \"DEMOGR\"       \"EAR\"          \"EmpaTom\"      \"ERQ\"         \n[21] \"ESM\"          \"fauxPasEv\"    \"GBS\"          \"GHQ12\"        \"Goodbye\"     \n[26] \"HRPVB\"        \"HRPVBpost\"    \"IBT\"          \"IDQ\"          \"IEC\"         \n[31] \"INFCONS\"      \"IRI\"          \"IRS\"          \"MDDF\"         \"MDMQ\"        \n[36] \"MIS\"          \"OBJNUM\"       \"OTRASRELIG\"   \"PBS\"          \"PRFBM\"       \n[41] \"PRFBMpost\"    \"PSETPP\"       \"PSPPC\"        \"PSS\"          \"PVC\"         \n[46] \"PWb\"          \"REI40\"        \"Report\"       \"RSS\"          \"RTS\"         \n[51] \"SASS\"         \"SBS\"          \"SCSORF\"       \"SDG\"          \"SRA\"         \n[56] \"SRBQP\"        \"SRSav\"        \"STAI\"         \"SWBQ\"         \"WEBEXEC\"     \n\n$tasks_js\n [1] \"AIM.js\"          \"Bank.js\"         \"BART.js\"         \"BNT.js\"         \n [5] \"bRCOPE.js\"       \"CAS.js\"          \"Consent.js\"      \"ConsentHTML.js\" \n [9] \"Cov19Q.js\"       \"COVIDCONTROL.js\" \"CRS.js\"          \"CRT7.js\"        \n[13] \"CRTMCQ4.js\"      \"CRTv.js\"         \"DASS21.js\"       \"DEBRIEF.js\"     \n[17] \"DEMOGR.js\"       \"EAR.js\"          \"EmpaTom.js\"      \"ERQ.js\"         \n[21] \"ESM.js\"          \"fauxPasEv.js\"    \"GBS.js\"          \"GHQ12.js\"       \n[25] \"Goodbye.js\"      \"HRPVB.js\"        \"HRPVBpost.js\"    \"IBT.js\"         \n[29] \"IDQ.js\"          \"IEC.js\"          \"INFCONS.js\"      \"IRI.js\"         \n[33] \"IRS.js\"          \"MDDF.js\"         \"MDMQ.js\"         \"MIS.js\"         \n[37] \"OBJNUM.js\"       \"OTRASRELIG.js\"   \"PBS.js\"          \"PRFBM.js\"       \n[41] \"PRFBMpost.js\"    \"PSETPP.js\"       \"PSPPC.js\"        \"PSS.js\"         \n[45] \"PVC.js\"          \"PWb.js\"          \"REI40.js\"        \"Report.js\"      \n[49] \"RSS.js\"          \"RTS.js\"          \"SASS.js\"         \"SBS.js\"         \n[53] \"SCSORF.js\"       \"SDG.js\"          \"SRA.js\"          \"SRBQP.js\"       \n[57] \"SRSav.js\"        \"STAI.js\"         \"SWBQ.js\"         \"WEBEXEC.js\"     \n\n\n\n\n7.1.2 Create a protocol\nThis will create a fully working protocol in folder_output. You can edit config.js to adapt the protocol to your needs. See experiment configuration for more details.\n\n  jsPsychMaker::create_protocol(canonical_tasks = c(\"AIM\", \"EAR\", \"IRI\"),\n                                folder_output = \"~/Downloads/TEST/new_protocol\", \n                                launch_browser = TRUE)"
  },
  {
    "objectID": "qmd/07-NEWtasks.html#Newtasks",
    "href": "qmd/07-NEWtasks.html#Newtasks",
    "title": "7  New protocols and tasks",
    "section": "7.2 New tasks",
    "text": "7.2 New tasks\n\n7.2.1 Create tasks\nYou can create new tasks with create_task() using csv or xls/xlxs files for the items, and html files for the instructions. But we recommend you use create_protocol() instead, so the tasks will be part of a fully working protocol, and testing them will be a breeze.\nThere are some things to take into account:\n\nfolder_tasks expects a folder with sub-folders with the ShortName of tasks. Inside, they need to have one csv or xls/xlxs file and html files. Use jsPsychMaker::copy_example_tasks(destination_folder = \"~/Downloads/TEST\") to see a working example\nThe csv or xls/xlsx file (ShortName.csv or Shortname.xls/xlsx) needs to have an ID and plugin columns, and then columns by the name of parameters used in the plugin (e.g. if using the survey-text plugin, you will need the prompt parameter). If you need help with the plugins parametes, see the jsPsych 6.3 list of plugins\nFor each html file (ShortName_instructions.html, ShortName_instructions2.html, etc) an instructions page will be created. The files need to end with _instructions.html or instructions#.html (# is a number). If there is no html, a default page will be used\nFor key questions (e.g. present this question only if participants responded “3”), you need to create a column named if_question and include a logical condition. For example:\n\n1 != 25: Response to item 1 is NOT 25\n3 == 20: Response to item 3 is 20\n15 == yes: Response to item 3 is yes\n\nIf you use tasks with images, video or audio, make sure to include the files in a media/ folder:\n\nImages: media/img\n\nVideos: media/vid\n\nAudio: media/audio\n\n\n\nYou can run the fully reproducible example included in jsPsychMaker:\n\nInstall jsPsychMaker from Github and load library\n\n\nif (!require('remotes')) install.packages('remotes'); library('remotes')\nif (!require('jsPsychMaker')) remotes::install_github(\"gorkang/jsPsychMaker\"); library('jsPsychMaker')\n\n\nCopy example tasks\n\nThis will copy a few example tasks that you use to adapt your tasks. For example, MultiChoice and Slider tasks, a key questions mini-task (IfQuestion), and an ImageButtonResponse task.\n\n  jsPsychMaker::copy_example_tasks(destination_folder = \"~/Downloads/TEST\")\n\n\nCreate your protocol\n\n\n  # Create protocol\n  jsPsychMaker::create_protocol(folder_tasks = \"~/Downloads/TEST/\", \n                                folder_output = \"~/Downloads/TEST/new_protocol\", \n                                launch_browser = TRUE)"
  },
  {
    "objectID": "qmd/07-NEWtasks.html#HelpNewtasks",
    "href": "qmd/07-NEWtasks.html#HelpNewtasks",
    "title": "7  New protocols and tasks",
    "section": "7.3 HELP with new tasks",
    "text": "7.3 HELP with new tasks\nIf you need help developing new tasks, you can open a new Issue in the jsPsychMaker Github.\nWe will ask you to add the details about the task in the NEW tasks document.\nOnce the task is implemented, our goal is to always end up having a sister task preparation script in jsPsychHelpeR. You can try to create the preparation script and do a Pull request, or ask for help opening a new Issue in the jsPsychHelpeR Github.\n\n7.3.1 How to fill the NEW tasks document\n\nNEW tasks document\n\nFirst of all, you will need the original paper where the task was validated/translated to have all the details at hand. Please, send us a link to the paper.\nThe best way to fill the NEW tasks document is:\n\nFind a task similar to yours in the document Tareas jsPsychR where we have information about all the available tasks.\nCopy/paste the information from all the tabs to the NEW tasks document and adapt it.\n\nTry to be as consistent as possible. For example, when entering the information about numeric conversion in the Puntajes_items tab:\nAll the cells must be:  \n1 = Mucho  \n2 = Poco  \n...\nDO NOT do things like:\n1: Mucho  \n1 Mucho  \n1 pto = Mucho  \nMucho 1  \nPlease, make sure you fill out all the details in all the tabs."
  },
  {
    "objectID": "qmd/08-CreateSimulatePrepare.html#create-protocol",
    "href": "qmd/08-CreateSimulatePrepare.html#create-protocol",
    "title": "8  CreateSimulatePrepare",
    "section": "8.1 Create protocol",
    "text": "8.1 Create protocol\nCreate a protocol with jsPsychMaker::create_protocol():\n\n# 1) Install jsPsychMaker\nif (!require('remotes')) install.packages('remotes'); remotes::install_github(\"gorkang/jsPsychMaker\")\n\n# 2) Check available tasks\njsPsychMaker::list_available_tasks()$tasks\n\n# 3) Create protocol\njsPsychMaker::create_protocol(canonical_tasks = c(\"AIM\", \"EAR\", \"IRI\"),\n                              folder_output = \"~/Downloads/protocol999\", \n                              launch_browser = FALSE)\n\nYou can now edit the configuration file (~/Downloads/protocol999/config.js) to adjust the project’s parameters."
  },
  {
    "objectID": "qmd/08-CreateSimulatePrepare.html#simulate-participants",
    "href": "qmd/08-CreateSimulatePrepare.html#simulate-participants",
    "title": "8  CreateSimulatePrepare",
    "section": "8.2 Simulate participants",
    "text": "8.2 Simulate participants\nSimulate participants with {jsPsychMonkeys}. Make sure your system has a functioning docker installation, see jsPsychMonkey’s setup:\n\n# 1) Install jsPsychMonkeys\nif (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychMonkeys')\n\n# 2) Run monkeys\n  # Go to _targets.R: Change parameter `local_folder_tasks` to your folder_output above. For example:  \n  # - On Ubuntu, `local_folder_tasks = \"~/Downloads/protocol999\"`\n  # - On Windows, `local_folder_tasks = \"C:/Users/myusername/Downloads/protocol999\"`\n\njsPsychMonkeys::release_the_monkeys(uid = \"1:10\", \n                                    local_folder_tasks = \"~/Downloads/protocol999/\")\n\nThe monkeys responses csv’s should be initially downloaded in your Downloads folder, and automatically moved to a .data/ folder inside the protocol folder. For example, ~/Downloads/protocol999/.data"
  },
  {
    "objectID": "qmd/08-CreateSimulatePrepare.html#prepare-data",
    "href": "qmd/08-CreateSimulatePrepare.html#prepare-data",
    "title": "8  CreateSimulatePrepare",
    "section": "8.3 Prepare data",
    "text": "8.3 Prepare data\nCreate a data preparation project with jsPsychHelpeR::run_initial_setup():\n\n# 1) Install\nif (!require('remotes')) install.packages('remotes'); remotes::install_github(\"gorkang/jsPsychHelpeR\")\n\n# 2) Create project\njsPsychHelpeR::run_initial_setup(pid = \"999\", data_location = \"~/Downloads/protocol999/.data\", dont_ask = TRUE)\n\n# 3) Restore all the necessary packages using {renv}\nrenv::restore(prompt = FALSE)\n\n# 4) Run data preparation\ntargets::tar_make()\n\nIf you don’t give a value to the folder parameter in jsPsychHelpeR::run_initial_setup(), the new project will be created in ~/Downloads/jsPsychHelpeRtest/. After step 4), the prepared data can be found in the outputs/data folder of the new project, reports in outputs/reports, etc."
  },
  {
    "objectID": "qmd/10-references.html",
    "href": "qmd/10-references.html",
    "title": "References",
    "section": "",
    "text": "jsPsych\ntargets\n\n\n\nLandau, William Michael. 2021. “The Targets r Package: A Dynamic\nMake-Like Function-Oriented Pipeline Toolkit for Reproducibility and\nHigh-Performance Computing” 6: 2959. https://doi.org/10.21105/joss.02959."
  }
]