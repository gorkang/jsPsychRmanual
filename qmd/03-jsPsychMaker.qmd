---
output: html_document
editor_options: 
  chunk_output_type: console
---

# jsPsychMaker {#jsPsychMaker}

------------------------------------------------------------------------

[jsPsychMaker](https://github.com/gorkang/jsPsychMaker): Create experiments with jsPsych, randomize participants, etc.

------------------------------------------------------------------------

::: {.callout-tip icon=false}

## In brief


Using jsPsychMaker to build experimental protocols helps you with a few things:

-   Create full protocols using:  

    + tasks already implemented
    
    + task that will be created reading a csv or excel file
    
- Configure your protocol by editing a simple config.js file

    -   You can also use the [jsPsychMaker Shiny APP](https://gorkang.shinyapps.io/jsPsychMaker_config/) to edit your config.js file

-   Select order of tasks, randomize blocks of tasks, etc.

-   Randomizes participants to groups, making sure the balance between the groups is maintained

-   Allow participants to continue in the task where they left in the protocol

-   Set time limits to complete the protocol

    -   Automatically discard participants over the time limit, freeing the slots for new participants

-   Run online and offline protocols

-   Simulate participants with [jsPsychMonkeys](#jsPsychMonkeys)

-   *Automagically* get your data prepared with [jsPsychHelpeR](#jsPsychHelpeR)

:::   

------------------------------------------------------------------------

**See [QuickGuide](#QuickGuidejsPsychMaker) for basic instructions.**

------------------------------------------------------------------------

![](../img/jsPsychMaker.png)



## Available tasks

```{r message=FALSE, warning=FALSE, include=FALSE}

googlesheets4::gs4_auth("gorkang@gmail.com")

DF_raw = googlesheets4::read_sheet("1Eo0F4GcmqWZ1cghTpQlA4aHsc8kTABss-HAeimE2IqA", sheet = 2, skip = 0) |> 
    dplyr::rename(short_name = `Codigo Test`) |> 
    dplyr::filter(!grepl("short_name", short_name)) |> 
    dplyr::arrange(short_name) |> 
    dplyr::select(short_name, Nombre, Descripcion) |> 
    tidyr::drop_na(short_name)

DF_raw_NEW = googlesheets4::read_sheet("1LAsyTZ2ZRP_xLiUBkqmawwnKWgy8OCwq4mmWrrc_rpQ", sheet = 2, skip = 0)

# DF_raw_NON_canonical = googlesheets4::read_sheet("1zMLEjM73wTkbUNfND2H5c2Ev28kSP8TcJWwaYCH8X4w", sheet = 2, skip = 0)


```

In `r Sys.Date()` we have `r nrow(DF_raw)` tasks implemented, and `r nrow(DF_raw_NEW)` in development. The full details about the available tasks can be checked in [this document](https://docs.google.com/spreadsheets/d/1Eo0F4GcmqWZ1cghTpQlA4aHsc8kTABss-HAeimE2IqA/edit#gid=0). You can always check [the full list of tasks in the Github repo](https://github.com/gorkang/jsPsychMaker/tree/main/canonical_protocol/tasks).  

To list the available tasks in the jsPsychMaker R package in you console, you can use the `list_available_tasks()` function. If you don't have the `jsPsychMaker` package, [install it first](02-QuickGuide.html#install-jspsychmaker).  

```{r, eval=TRUE}
jsPsychMaker::list_available_tasks()$tasks
```


If you need help creating a NEW task, see the section [help creating a new task](#Newtasks).  

------------------------------------------------------------------------

Below, a table with an overview of the available tasks in the [Google Sheet](https://docs.google.com/spreadsheets/d/1Eo0F4GcmqWZ1cghTpQlA4aHsc8kTABss-HAeimE2IqA/edit#gid=0). If a task is here but not in the R package, you can [open an issue to let us know](https://github.com/gorkang/jsPsychMaker/issues). 

```{r echo=FALSE, message=FALSE, warning=FALSE, out.width='100%'}

# Works only if knit() is called via render(), i.e. when using the button in RStudio.
if (knitr::opts_knit$get("rmarkdown.pandoc.to") == "html") {
  DT::datatable(DF_raw, filter = 'top', options = list(pageLength = 25, dom = 'tlp')) #
} else {
  knitr::kable(DF_raw, format = "latex", booktabs = TRUE, longtable = TRUE, caption = "Test")  |> 
    kableExtra::kable_styling(latex_options = c("hold_position", "repeat_header")) |> 
    kableExtra::column_spec(column = c(2), width = "10em") |> 
    kableExtra::column_spec(column = c(3), width = "20em") |>  
    kableExtra::kable_styling(latex_options = "striped")
}

```

## Experiment configuration

In the `config.js` file you can find the main parameters to control how your experiment works.


You can edit the config file in one of the following two ways:  

A) Go to `folder_output` and edit `config.js`. 

B) Use the [jsPsychMaker_config Shiny APP](https://gorkang.shinyapps.io/jsPsychMaker_config/) and copy the generated config.js file in the `folder_output` folder.  

If you use the app, you will need to copy the generated config.js file to your protocol folder. The Shiny app can also help you create a parametrized consent form (see the Consent tab).  


### Main parameters

-   `pid = 999;`: Number of protocol

-   `online = true;`: true if the protocol runs in a server, false if it runs locally

-   `max_participants = 3;`: If you have `between participants` conditions (participants are assigned to only one of a number of conditions), this is the max number of participants per condition

-   `random_id = false;`: true if you want to assign a random id to participants, false if the participant needs to input an id

-   `max_time = "24:00:00";`: Maximum time to complete the protocol (HH:MM:SS; Hours:Minutes:Seconds)

-   `accept_discarded = true;`: If a participant is discarded (i.e. exceeded the max_time), should we allow them to continue, given there are available slots?

-   `debug_mode = false;`: When testing the protocol:  

  + shows DEBUG messages
  
  + creates the DB tables if they don't exist
  
  + Avoids randomization (e.g. order of items) so the `jsPsychMonkeys` can have a reproducible behavior

### Order of tasks

```{js eval=FALSE}
first_tasks = ['Consent'];//  The protocol will start with these tasks in sequential order
last_tasks = ['Goodbye'];//  Last block of tasks presented (in sequential order)
```

Create as many blocks as needed:

```{js eval=FALSE}
randomly_ordered_tasks_1 = ['TASK1', 'TASK2']; //  Block of tasks in random order
randomly_ordered_tasks_2 = ['TASK3']; //  Block of tasks in random order
secuentially_ordered_tasks_1 = ['TASK5', 'TASK4']; // Block of tasks in sequential order
```

The final array of tasks can be build combining the above blocks. The order of the tasks in the arrays starting with "random" will be randomized.

```{js eval=FALSE}
tasks = ['first_tasks', 
         'randomly_ordered_tasks_1', 
         'secuentially_ordered_tasks_1', 
         'randomly_ordered_tasks_2', 
         'last_tasks'];
```

### Between-subject tasks

The variable `all_conditions` in `config.js` let's you define the Independent Variables (IV) and levels for the between-subject tasks:

If there is no between-subject task:

```{js eval=FALSE}
all_conditions = {"protocol": {"type": ["survey"]}};
```

If there are between-subject tasks:

```{js eval=FALSE}
all_conditions = {"NAMETASK": {"name_IV": ["name_level1", "name_level2"]}};
```

`jsPsychR` will randomize participants to the different conditions keeping the unbalance between conditions to the minimum possible.

## online-offline protocols

jsPsych uses standard web technologies (HTML, CSS y Javascript), so that protocols should run in any modern browser (updated, please). We recommend Google Chrome just because our test suite runs with Google Chrome, so we will catch its specific issues earlier.

### Offline

If you want to run a protocol locally (on your computer, on a lab computer), you need to:

-   set `online = false;` in the `config.js` file

-   double click index.html

`jsPsychR` will use `IndexedDB` to store the participants' progress and balance between conditions. The output csv files will be Downloaded to the Download folder of the computer where the protocol runs.

#### CORS ERRORS

If any of the tasks imports an html file, the Offline protocol will give a CORS error.

There are ways to disable web security in your browser, but it **MUST only be done if your experiment computer runs offline**, otherwise you will be exposed to very bad things.

See [how to run chrome disabling web security to avoid CORS error](https://stackoverflow.com/questions/3102819/disable-same-origin-policy-in-chrome):

-   `google-chrome --disable-web-security --user-data-dir="~/"`

### Online

Tu run a protocol online, set `online = true;` in the `config.js` file. You will need a couple more things:

-   MySQL running in your server\
-   A file `.secrets_mysql.php` with the content below\
-   Define the route to `.secrets_mysql.php` in `controllers/php/mysql.php`
    -   `require_once '../../.secrets_mysql.php';`\
    -   `r kableExtra::text_spec("THIS FILE **MUST NOT** BE PUBLICLY VISIBLE FROM THE BROWSER", color = "red")`\
-   **Upload the files to the server** :)

```{js eval=FALSE}
<?php

/* DO NOT UPLOAD TO PUBLIC REPO */

  $servername = "127.0.0.1";
  $username = "USERNAME OF THE DATABASE";
  $password = "PASSWORD OF THE DATABASE";
  $dbname = "NAME OF THE DB";
  
?>
```

`jsPsychR` will use `MySQL` to store the participants' progress and balance between conditions. The output csv files will be Downloaded in the `.data/` folder inside the protocol folder in the server.

Before launching the final experiment, make sure you start with a clean slate! That can be summarized in 3 simple steps:

1.  Check the configuration for you experiment (`config.js`) and make sure all is well. Some of the critical bits are:

```{js eval=FALSE}
pid = 999; // SHOULD have your project ID!
online = true; // true is good
max_participants = 100; // Max participants per contition [number]
max_time = "24:00:00"; // Max time to complete the protocol [HH:MM:SS]
debug_mode = false; // SHOULD be false

```

2.  Check that the `.data/` folder for your protocol is empty in the server. You will likely have remains of the piloting and Monkeys.

3.  Clean up the MySQL data associated to your protocol.

```{mysql eval=FALSE}
SET @PID = 999; // HERE YOUR PROTOCOL ID!

delete from experimental_condition where id_protocol=@PID;
delete from user where id_protocol=@PID;
delete from user_condition where id_protocol=@PID;
delete from user_task where id_protocol=@PID;
delete from task where id_protocol=@PID;
delete from protocol where id_protocol=@PID;

```

You will most likely need help from the server admin to perform these steps.


## Need help implementing a task!

If you need help creating a NEW task, see the section [help creating a new task](#Newtasks).  


## Developing tasks

Remember to place an `if (debug_mode === false)` before the randomization of the item order so when running in debug_mode, the items are not randomized. This is important so the behaviour of the jsPsychMonkeys is reproducible:

```{js eval=FALSE}
if (debug_mode === false) NAMETASK = jsPsych.randomization.repeat(NAMETASK,1);
```


## Technical aspects

We currently use [jsPsych 6.3](https://www.jspsych.org/6.3/) as the default, and started to implement the last stable jsPsych (7.3) recently. To choose a version for the protocols you create, use the parameter `jsPsych_version`. For example, `jsPsych_version = 7`. Things are not fully tested in the v7 so, use with care.  

There is a [migration guide](https://www.jspsych.org/7.0/support/migration-v7/) and a [Github issue with migration questions](https://github.com/jspsych/jsPsych/discussions/2179).

### Misc

When index.html is launched:

-   Checks if there are available slots

When an uid is assigned:

-   `questions` array is created

-   `between-participants` conditions are assigned and stored in the DB (MySQL if online, IndexedDB if offline)

Each question, timeline or conditional question needs to have a:

```{js eval=FALSE}
data: {trialid: 'NameTask_001', procedure: 'NameTask'}
```

The `trialid` identifies the trial, and the `procedure` makes possible to find that trial so participants can continue the tasks where they left, know when participants finished the tasks, etc. This is done in MySQL if online, IndexedDB if offline.

`trialid`'s need to have a standardized structure, which generally conforms with `NameTask_3DigitNumber`. When using conditional items the structure can be a bit more complex, but not much. We use the following rules to check for non-complying trialid's:

    ^[a-zA-Z0-9]{1,100}_[0-9]{2,3}$ -> `NameTask_2or3DigitNumber`, for example `BNT_001`  
    ^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_[0-9]{1,3}$ -> `NameTask_2or3DigitNumber_1to3DigitsSuffix`, for example `BNT_002_1`  
    ^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_if$ -> `NameTask_2or3DigitNumber`, for example `BNT_002_if`  
    ^[a-zA-Z0-9]{1,100}_[0-9]{2,3}_[0-9]{1,3}_if$  -> `NameTask_2or3DigitNumber`, for example `BNT_002_1_if`  

### jsPsychMaker main changes on a task

1.  Start of a task

```{js eval=FALSE}
questions = ( typeof questions != 'undefined' && questions instanceof Array ) ? questions : [];
questions.push( check_fullscreen('NameOfTask') );
NameOfTask = [];
```

2.  Each item

```{js eval=FALSE}
data: {trialid: 'NameOfTask_01', procedure: 'NameOfTask'}
```

3.  End of experiment

```{js eval=FALSE}
if (debug_mode == 'false') NameOfTask = jsPsych.randomization.repeat(NameOfTask, 1);
NameOfTask.unshift(instruction_screen_experiment);
questions.push.apply(questions, NameOfTask)

questions.push({
    type: 'call-function',
    data: {trialid: 'NameOfTask_000', procedure: 'NameOfTask'},
    func: function(){
      if (online) {
        var data = jsPsych.data.get().filter({procedure: 'NameOfTask'}).csv();
      } else {
        var data = jsPsych.data.get().filter({procedure: 'NameOfTask'}).json();
      }
      saveData(data, online, 'NameOfTask');
    }
});
```

### Conditional questions

```{js eval=FALSE}
var question001 = {
  type: 'survey-multi-choice-vertical',
  questions: [{prompt: '<div class="justified">¿Usted se ha vacunado contra el coronavirus / covid-19?</div>', options: ['&nbsp;Si', '&nbsp;No'], required: true,  random_options: false, horizontal: false}],
  data: {trialid: 'PVC_001', procedure: 'PVC'}
};
PVC.push(question001);

var question001_1 = {
  type: 'survey-multi-choice-vertical',
  questions: [{prompt: '<div class="justified">¿Usted se va a vacunar contra el coronavirus covid-19?</div>', options: ['&nbsp;Si', '&nbsp;No', '&nbsp;No estoy seguro'], required: true,  random_options: false, horizontal: false}],
  data: {trialid: 'PVC_001_1', procedure: 'PVC'}
};

var if_question001_1 = {
  timeline: [question001_1],
  data: {trialid: 'PVC_001_1_if', procedure: 'PVC'},
  conditional_function: function(){
    let data = (JSON.parse((jsPsych.data.get().values().find(x => x.trialid === 'PVC_001'))['response'])['Q0']).trim();
    if((data) ==  'No'){
      return true;
    } else {
      return false;
    }
  }
};
PVC.push(if_question001_1);
```

## Common ERRORS

If you get the following error in the console: `Uncaught TypeError: Cannot read properties of undefined (reading 'procedure')`

Run this in the console:

```{js eval=FALSE}
for (var i = 0; i < questions.length; i++) {
  console.log(i + questions[i].data["procedure"])
}
```

It will stop in one of the items. Go to the console, check the array `questions` and go to the number that failed.

When you know the task and item that fails, you probably need to add:

```{js eval=FALSE}
`data: {trialid: 'TASKNAME_ITEMNUMBER', procedure: 'TASKNAME'}
```
