# jsPsychMonkeys {#jsPsychMonkeys}

------------------------------------------------------------------------

[jsPsychMonkeys](https://github.com/gorkang/jsPsychMonkeys): Release Monkeys to a jsPsych experiment using the R package {targets}, docker and {RSelenium}.

------------------------------------------------------------------------

With jsPsychMonkeys you can simulate participants and easily do the following:

-   Simulate participants online and offline

-   Simulate participants sequentially and in parallel

-   Ask your Monkeys to take pictures of each screen

-   Make the behavior of the Monkeys reproducible setting a random seed associated with their unique id

-   Store logs of the process, including console logs with errors

-   Watch your participants randomly click things in VNC

------------------------------------------------------------------------

**See [QuickGuide](#QuickGuidejsPsychMonkeys) for basic instructions.**

------------------------------------------------------------------------

## How to simulate participants

To run monkeys locally:  

```

jsPsychMonkeys::release_the_monkeys(uid = "1", 
                                    local_folder_tasks = "~/Downloads/protocol999/")


```


To run monkeys on a server:  

```

jsPsychMonkeys::release_the_monkeys(uid = "1", 
                                    server_folder_tasks = "999", 
                                    credentials_folder = "~/.vault/")
```

`credentials_folder` must contain `SERVER_PATH.R` and  `.credentials`. See [below](04-jsPsychMonkeys.html#launch-monkeys-on-a-server) for the expected content of those files.  




## Issues

If the [QuickGuide](#QuickGuidejsPsychMonkeys) configuration steps didn't work... You may need to do one of the things below:

-   Run participants manually

-   Switch to [Ubuntu](https://ubuntu.com/download/desktop) :-)


## Parameters

Edit the `Parameters` section of the `_targets.R` file. The minimal set of parameters needed are:

    parameters_monkeys_minimal = list(
      uid = 1:10, # User id's for the participants. 
      local_folder_tasks = "Downloads/protocol999" # Location of your jsPsych protocol
      # On Windows: local_folder_tasks = "C:/Users/myusername/Downloads/protocol999"  
    )

------------------------------------------------------------------------

### Release the Monkeys!

If you want a sequential process:

-   `targets::tar_make()`

If you want a parallel horde of Monkeys:

-   `targets::tar_future_make(workers = 2)`

You can set as many parallel workers as you want. With `targets::tar_make_future(workers = future::availableCores() - 1)` you can have as many workers as your computer cores minus 1.

In `run.R` you can see the typical set of commands needed for a variety of situations.

------------------------------------------------------------------------

10 Monkeys completing a protocol in parallel. You can use `targets::tar_watch(seconds = 10, outdated = FALSE, targets_only = TRUE)` to see the live progress:

```{r, echo=FALSE, out.width='100%'}
# Works only if knit() is called via render(), i.e. when using the button in RStudio.
if (knitr::opts_knit$get("rmarkdown.pandoc.to") == "html") {
  knitr::include_graphics(here::here("img/jsMonkeys_parallel.gif"))
} else {
  knitr::include_graphics(here::here("img/jsMonkeys_parallel.png"))
}
```

### Launch Monkeys on a server

You will need two files for the configuration in the hidden and NOT SHARED `.vault/` folder:  

- `.vault/SERVER_PATH.R`:  contains the path where the protocols are located in your server: `server_path = "http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/"`  

- `.vault/.credentials`: contains a list with the user and password for the server: `list(user = "", password = "")`


With the `server_folder_tasks` you will set the subfolder where the protocol is located. In the example below the Monkeys would go to, `http://URL_OF_YOUR_SERVER/PROTOCOLS_GENERAL_FOLDER/999`

    parameters_monkeys_minimal = list(
      uid = 1:10, # User id's for the participants. 
      server_folder_tasks = "999" # Location of your jsPsych protocol
    )

### Parameters for parameters_monkeys_minimal

There are a few parameters that can be useful:

-   `uid_URL = TRUE`: The uid is passed in the URL (e.g. `&uid=1`)

-   `local_folder_tasks = rep("Downloads/tests/test_prototol", 25)`: Passing a vector of multiple protocols will make the Monkeys to complete all of them.

-   `keep_alive = TRUE` Keep the docker container alive after completing the tasks

-   `DEBUG = TRUE` Activate DEBUG mode. Lot's of stuff will show up in the console.

-   `open_VNC = TRUE` Activate DEBUG mode and open a VNC container to see the Monkeys' progress.

-   `screenshot = TRUE` The Monkeys will take a picture of all the pages they see. The .png files are stored in `outputs/screenshots`

-   `debug_file = TRUE` Activate DEBUG mode and store all the console output in the `outputs/log`

-   `big_container = TRUE` Sets the Shared memory size (/dev/shm) to 2 gigabytes. This is useful to avoid long/complex protocols to crash

-   `disable_web_security = TRUE` If you are running a local protocol that loads external files (e.g. consent form in a html file), you may need this. Only works with Google Chrome.

-   `console_logs = TRUE` Store the browser's console logs. Only works with Google Chrome

-   `forced_random_wait = TRUE` Will wait a randomly sampled number of seconds on page 4

-   `forced_seed = 11` Set a random seed so the Monkeys' behavior will be fully reproducible

-   `forced_refresh = 20` Refresh browser in page 20 (if TRUE is given, it will refresh in a randomly sampled page)

#### Parameters details

-   `local_folder_tasks`: If the folder is not accessible to Docker (anything outside the Download folder), jsPsychMonkeys will create a copy of the protocol in `Downloads/JSPSYCH/`

## Technical aspects

Since jsPsych 7.1 there is a [simulation mode](https://www.jspsych.org/7.3/overview/simulation/) available, which should be much faster than the good ol' Monkeys. Once we migrate to jsPSych 7.x, we will probably retire this section.
