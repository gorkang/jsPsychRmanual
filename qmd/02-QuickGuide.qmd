# Quick Guide {#QuickGuide}

## Pre-requisites

1. [Install R](https://cran.rstudio.com/)

2. [Install RStudio desktop](https://posit.co/download/rstudio-desktop/)



## jsPsychMaker: Create an experimental protocol {#QuickGuidejsPsychMaker}

------------------------------------------------------------------------

**See the [jsPsychMaker chapter](#jsPsychMaker) for more detailed instructions.**

------------------------------------------------------------------------

**Outline**

1)  Install jsPsychMaker

2)  `create_protocol()` using any of the `list_available_tasks()` and edit the `config.js` to adapt the protocol settings

3)  Open `index.html` in your browser

------------------------------------------------------------------------

#### 1) Install jsPsychMaker {.unnumbered}

Open RStudio and run the following line in the console. This will install the jsPsychMaker package from the Github repository.  


```{r, eval=FALSE}

if (!require('remotes')) install.packages('remotes'); remotes::install_github("gorkang/jsPsychMaker")

```

#### 2) Create protocol {.unnumbered}

To create and test a fully working protocol in `folder_output` you can use the `create_protocol()` function. Include the `canonical_tasks` you want from the available ones (you can list them with `list_available_tasks()`). You have more details in [available-tasks](03-jsPsychMaker.html#available-tasks). If you need new tasks, see [New tasks](07-NEWtasks.html#Newtasks).  

```{r, eval=FALSE}

  jsPsychMaker::create_protocol(canonical_tasks = c("AIM", "EAR", "IRI"),
                                folder_output = "~/Downloads/MyProtocol", 
                                launch_browser = TRUE)

```

You must edit `config.js` to adapt the protocol to your needs. See [experiment configuration](03-jsPsychMaker.html#experiment-configuration) for more details.  


#### 3) Run experiment {.unnumbered}

The experiment is ready to run on your computer. Open `index.html` in Google Chrome or your favorite (and up to date) browser.



## jsPsychMonkeys: Simulate participants {#QuickGuidejsPsychMonkeys}

------------------------------------------------------------------------

**See the [jsPsychMonkeys chapter](#jsPsychMonkeys) for more detailed instructions.**

------------------------------------------------------------------------

jsPsychMonkeys uses [Selenium](https://www.selenium.dev/) inside a [Docker](https://www.docker.com/) container to guarantee each session is a clean session. On Linux it's use and configuration is trivial, but on Windows it can be trickier.

------------------------------------------------------------------------

**Outline**

1)  Download jsPsychMonkeys

2)  Setup

3)  Run Monkeys

------------------------------------------------------------------------

#### 1) Download jsPsychMonkeys {.unnumbered}

```{r, eval=FALSE}

if (!require('usethis')) install.packages('usethis'); library('usethis')

usethis::use_course(url = "gorkang/jsPsychMonkeys", destdir = "~/Downloads/")

```

#### 2) Setup {.unnumbered}

Run setup: `source("setup.R")`. This will install the packages needed.

**Ubuntu**

You may need to install some system libraries first:

-   `sudo apt install libssl-dev libcurl4-openssl-dev libxml2-dev docker`


#### 3) Run Monkeys {.unnumbered}

Open `run.R` and follow the instructions. Mainly:

-   Open `_targets.R` file: `rstudioapi::navigateToFile("_targets.R")`

-   Edit `parameters_monkeys_minimal`. For example, launch participants 1 to 5 to the 999 protocol locally:

    -   `parameters_monkeys_minimal = list(uid = 1:5, local_folder_tasks = "Downloads/999")`

-   Run Monkeys!: `targets::tar_make()`



## jsPsychHelpeR: Prepare data {#QuickGuidejsPsychHelpeR}

------------------------------------------------------------------------

**See the [jsPsychHelpeR chapter](#jsPsychHelpeR) for more detailed instructions.**

------------------------------------------------------------------------

**Outline**

1)  Install jsPsychHelpeR

2)  Create new project

3)  Run data preparation

------------------------------------------------------------------------

#### 1) Install jsPsychHelpeR {.unnumbered}

-   Run the following line in a RStudio console to install jsPsychHelpeR from Github. 

```{r, eval=FALSE}

if (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychHelpeR')

```

#### 2) Create new project {.unnumbered}

The function `run_initial_setup()` will create and setup a new RStudio project for your data.  

`run_initial_setup()` will:
-   Install dependencies\
-   Create necessary folders\
-   Copy the data to the data/pid folder
-   Move data with sensitive tasks to the .vault folder
-   Create a customized `_targets.R` file adapted to the data of your protocol, so data preparation can run automagically  


Before doing this, you need to locate the raw data for the jsPsychMaker project.   

In this example, our raw data is in `~/Downloads/JSPSYCH/999/` and we want the new project to be in `~/Downloads/jsPsychHelpeR_999/`

```{r, eval=FALSE}

jsPsychHelpeR::run_initial_setup(pid = '999', 
                                 data_location = '~/Downloads/JSPSYCH/999/', 
                                 folder = '~/Downloads/jsPsychHelpeR_999/')

```


#### 3) Run data preparation {.unnumbered}

Run the data preparation with `targets::tar_make()`

```{r, eval=FALSE}

targets::tar_make()

```

If you are curious, running `targets::tar_visnetwork(targets_only = TRUE)` will show the whole data preparation targets tree. Open the file `run.R` for more details.  

------------------------------------------------------------------------
