# Quick Guide {#QuickGuide}

## Pre-requisites {-}

1. [Install R](https://cran.rstudio.com/)

2. [Install RStudio desktop](https://posit.co/download/rstudio-desktop/)



## jsPsychMaker: Create an experimental protocol {#QuickGuidejsPsychMaker}

------------------------------------------------------------------------

**See the [jsPsychMaker chapter](#jsPsychMaker) for more detailed instructions.**

------------------------------------------------------------------------

**Outline**

1)  Install jsPsychMaker

2)  `create_protocol()` using any of the `list_available_tasks()` and edit the `config.js` to adapt the protocol settings

3)  Open `index.html` in your browser

------------------------------------------------------------------------

#### 1) Install jsPsychMaker {.unnumbered}

Open RStudio and run the following line in the console. This will install the jsPsychMaker package from the Github repository.  


```{r, eval=FALSE}

if (!require('remotes')) install.packages('remotes'); remotes::install_github("gorkang/jsPsychMaker")

```

#### 2) Create protocol {.unnumbered}

Create and test a fully working protocol with `jsPsychMaker::create_protocol()`.   

Include the `canonical_tasks` you want (list the available tasks with `jsPsychMaker::list_available_tasks()`). You have more details in [available-tasks](03-jsPsychMaker.html#available-tasks). If you need new tasks, see [New tasks](07-NEWtasks.html#Newtasks).  

```{r, eval=FALSE}

  jsPsychMaker::create_protocol(canonical_tasks = c("AIM", "EAR", "IRI"),
                                folder_output = "~/Downloads/protocol999", 
                                launch_browser = TRUE)

```

You must edit `config.js` to adapt the protocol to your needs. See [experiment configuration](03-jsPsychMaker.html#experiment-configuration) for more details.  


#### 3) Run experiment {.unnumbered}

The experiment is ready to run on your computer. Open `index.html` in Google Chrome or your favorite (and up to date) browser.



## jsPsychMonkeys: Simulate participants {#QuickGuidejsPsychMonkeys}

------------------------------------------------------------------------

**See the [jsPsychMonkeys chapter](#jsPsychMonkeys) for more detailed instructions.**

------------------------------------------------------------------------

jsPsychMonkeys uses [Selenium](https://www.selenium.dev/) inside a [Docker](https://www.docker.com/) container to guarantee each session is a clean session. On Linux its use and configuration is trivial, but on Windows it can be trickier.

------------------------------------------------------------------------

**Outline**

1)  Download jsPsychMonkeys

2)  Setup

3)  Run Monkeys

------------------------------------------------------------------------

#### 1) Install jsPsychMonkeys {.unnumbered}

```{r, eval=FALSE}

if (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychMonkeys')

```

#### 2) Setup {.unnumbered}

**Ubuntu**  

You may need to install some system libraries first:  

- `sudo apt install libssl-dev libcurl4-openssl-dev libxml2-dev docker`  
- If the Monkeys do their work but no csv's appear, make sure your the docker user has write access to the `~/Downloads` folder.  

**Windows**  

- Install [docker desktop](https://docs.docker.com/desktop/install/windows-install/)  
- Update wsl (in a command prompt): `wsl - update`  


#### 3) Run Monkeys {.unnumbered}

Use the `uid` parameter to set a number of participants, e.g. `uid = "1:10"` would launch monkeys 1 to 10.  

Use the `local_folder_tasks` parameter to indicate the location of the `jsPsychMakeR` protocol. If you are on Windows, `local_folder_tasks` value should be something similar to `C:/Users/myusername/Downloads/protocol999`.  


```{r, eval=FALSE}
jsPsychMonkeys::release_the_monkeys(uid = "1:10", 
                                    local_folder_tasks = "~/Downloads/protocol999/")
```

If the protocol was running from a loccal folder, the Monkey's responses will be copied to a subfolder `.data/` inside the `local_folder_tasks`. In the example above, `~/Downloads/protocol999/.data`. If the protocol was running on the server (see the `server_folder_tasks` parameter), the data will be in the protocols' `.data/` folder inside the server.  



## jsPsychHelpeR: Prepare data {#QuickGuidejsPsychHelpeR}

------------------------------------------------------------------------

**See the [jsPsychHelpeR chapter](#jsPsychHelpeR) for more detailed instructions.**

------------------------------------------------------------------------

**Outline**

1)  Install jsPsychHelpeR

2)  Create new project

3)  Run data preparation

------------------------------------------------------------------------

#### 1) Install jsPsychHelpeR {.unnumbered}

-   Install jsPsychHelpeR from Github. 

```{r, eval=FALSE}

if (!require('remotes')) utils::install.packages('remotes'); remotes::install_github('gorkang/jsPsychHelpeR')

```

#### 2) Create new project {.unnumbered}

Create and setup a new RStudio project for your data. Before doing this, you need to locate the raw data for the jsPsychMaker project.   

In this example, our raw data is in `~/Downloads/protocol999/.data/` and we want the new project to be in `~/Downloads/jsPsychHelpeR999/`  

```{r, eval=FALSE}

jsPsychHelpeR::run_initial_setup(pid = '999', 
                                 data_location = '~/Downloads/protocol999/.data/', 
                                 folder = '~/Downloads/jsPsychHelpeR999/')

```

After this, a new RStudio project will open.


#### 3) Run data preparation {.unnumbered}

Run the data preparation with `targets::tar_make()`

```{r, eval=FALSE}

# Restore all the necessary packages using renv
renv::restore(prompt = FALSE)

# Run data preparation
targets::tar_make()

```

If you are curious, running `targets::tar_visnetwork(targets_only = TRUE)` will show the whole data preparation targets tree. Open the file `run.R` for more details.  

------------------------------------------------------------------------
